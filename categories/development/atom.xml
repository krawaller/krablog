<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/categories/development/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-04-05T14:37:02+02:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Titanium app for explaining layout mechanisms]]></title>
    <link href="http://krawaller.github.com/krablog/titanium-app-for-explaining-layout-mechanisms/"/>
    <updated>2011-08-04T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/titanium-app-for-explaining-layout-mechanisms</id>
    <content type="html"><![CDATA[<p>During a recent app project, I felt constantly hampered by not having a strong enough ninjutsu understanding of laying out things in a Titanium app. How does horizontal and vertical layout actually work? What's the difference between a View, a ScrollView and a ScrollableView? When having too much content to show on screen, do I want the parent or child to scroll? What happens when I have a scrolling child in a scrolling parent?</p>
<p>I constantly had to pause my work to peruse the Titanium docs/kitchensink/sourcecode, or (more often) do some experimenting on the side, regarding stuff that I suspected I really should have nailed down. It felt like doing maths without having memorized the multiplication tables!&nbsp;</p>
<h3>The TiView app</h3>
<p>Eventually the added-up frustration got too great, so I set aside some time for grokking and getting comfortable with the API. This resulted in a small Titanium application we call <strong>TiView</strong>. It has a number of demos, showing on screen what various layout properties will actually result in. Most of it probably already obvious to most of you out there, but I felt it helped me to "say it out loud" in this way.</p>
<p>As stated the app is very simple. It has a number of demos, ordered into categories. The screenshot below shows the current content, I hope to add some more to it before I move on too far:&nbsp;</p>
<p>[[posterous-content:frowHAoziJDnxttahjCg]]Each category then consists of a ScrollableView, where each view is a demo of some layout code. The properties used are displayed inside the laid-out child:</p>
<p>[[posterous-content:ufiCtpiiqrnHFAacpcgH]]</p>
<p>The source code is available in the Git repo <a href="http://github.com/krawaller/tiview" title="TiView git repo" target="_blank">here</a>. Have a snoop and see if might be of any help. Or even better, add more demos of your own! It's just 250 lines in a single file, and all the demos are just object literals sent into a constructor function, so getting your own ideas in there shouldn't require that strong a shoe-horn:</p>
<script src="https://gist.github.com/1125138.js?file=gistfile1.js"></script>

<h3>Android VS iPhone</h3>
<p>When we ran the app on an Android, it turned out that there where even more difference in behaviour between the platforms that we had originally thought! Therefore we gave the demos platform-specific descriptions.</p>
<p>This process was hugely informative for us - not only did we gain a better understanding of the layout API:s, but also of the (many) differences between the platforms! Having a good map of these differences will make it much easier to write code that won't behave differently on the other platform.</p>
<p>So we encourage you to try out TiView, and hope it will be of use!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Krawaller's iPad design flow - productivity app recommendations]]></title>
    <link href="http://krawaller.github.com/krablog/krawallers-ipad-design-flow-productivity-app/"/>
    <updated>2011-03-26T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/krawallers-ipad-design-flow-productivity-app</id>
    <content type="html"><![CDATA[<p>While waiting for my younger brother to post some long-promised content, I thought I'd give a quick overview of our design flow iPad usage. When I first got my pad, I bought it mainly as a testing device, not really anticipating to use it as an actual productivity tool. Because let's face it, in what fields could it possibly bester my trusted MacBook Pro?&nbsp;</p>
<p>In quite a few, as it turned out! Obvious as it might be to the rest of the world, a touch screen is a very different input device compared to a touchpad and keyboard. And, as I eventually realised, it is especially well suited for sketching and doing mockups.&nbsp;</p>
<h2>Our design process</h2>
<p>We've always done quite a bit of planning before we got our hands dirty in the editors. This planning can take many different forms; napkin scribbles, phone conversations, whiteboard doodling, and sometimes an actual UML diagram.&nbsp;</p>
<p>This initial sketching would cover all aspects of the application-to-be: program flow, data structures, use cases, and UI layout. Mostly we'd go through several iterations, and only when things began to settle down a bit did we fire up the editors.&nbsp;</p>
<p>This flow remains the same, but what the iPad has allowed us to do is to digitize the first part. Doing those things on the computer was never an option; it's simply too slow! There are plenty of good mindmap/diagram/software-planning programs for MacOS, but none that can keep up with the speed of thought.&nbsp;</p>
<p>On the iOS, it turned out, it's a different story, all thanx to the touchpad. Using this input device, you can sketch and mock-up almost as fast as you can think it!&nbsp;</p>
<p>We never thought of our disorganized doodling as consisting of different sketching paradigms such as mindmapping, flowcharting, etc. It was all something inbetween, crossing haphazardly back and forth between approaches. Now, using iPad apps instead of napkins, this process has broken down into several main areas:</p>
<ul>
<li><strong>mindmapping</strong> - organizing thoughts together</li>
<li><strong>flowcharting</strong> - mapping the flow through a single interaction/function/event chain</li>
<li><strong>prototyping</strong> - mocking up user interfaces or parts thereof</li>
<li><strong>doodling</strong> - simple free-hand sketching</li>
<li><strong>codehandling</strong> - reading existing code bases</li>
<li><strong>filesharing</strong> - using cloud file handling services</li>
</ul>
<p>And here follows a quick run through our favourite tool for each of these areas!</p>
<h2>Mindmapping with iThoughts</h2>
<p>First off: mindmapping. This can be used initially just to sort app ideas together, but also in a later stage to map out the ingredients of the app: UI parts, classes, globals, etc. In essence this is our rebellious interpretation of a UML class diagram, I guess.&nbsp;</p>
<p>[[posterous-content:HcnidBeAAyybnydkaDzG]]</p>
<p>To this end, our favourite tool has come to be iThoughts HD. There are a lot of various options, of which I've tried most, but iThoughts somehow just resonates with me. Some favoured features are:</p>
<ul>
<li>Organisation of maps: a fundamental feature, you might think, but it is missing from a surprisingly huge number of mindmapping apps. iThoughts lets you organise maps in folders and subfolders. It is also very easy to base a map upon another, copy them, etc.</li>
<li>Excellent export options. And with excellent I mean that it supports our file handling system of choice, namely Dropbox. It can synchronize automatically to a map in the cloud, and also of course export into other formats.</li>
<li>Brilliant UI shortcuts throughout, minimizing clicks and gestures. It is very evident that the developers have invested lots of time in making the mapping process as smooth as possible.</li>
<li>Perhaps not a feature, but the maps are, with very little effort, rather beautiful! Not a factor to sneer at, and a potential client frequently reacts much better to an iThoughts-generated pdf than to our previous napkin-based charts...</li>
</ul>
<h2>Flowcharting with Instaviz</h2>
<p>When zooming in a bit at the process and planning out a user interaction (or even a specific application function), flowcharting is an excellent way to visualize your thoughts. Again there are a multitude of options of which I've sampled most, but the one that stuck out from the crowd is Instaviz.&nbsp;</p>
<p>[[posterous-content:uhFCsjmEhmkecdiDfusu]]</p>
<p>Instaviz boasts having an advanced layout algorithm developed over the course of decades, and this immediately shows. Not having any control of the actual layout and position of boxes takes some getting used to, but once you have it's really convenient. The algorithm will always (so far completely without exception) find an excellent way to organize the boxes, so that the flow is easy to follow and as few connections as possible cross each other.</p>
<p>Now, there are some irks; Instaviz has no chart organisations (they're all just lying in one huge list, meaning you have to prefix the names with project and milestone in order to navigate), and perhaps worse, there is no way to select more than one box at a time. There are a few other rough edges in the UI as well, such as having to delete the default text in a label, etc.&nbsp;</p>
<p>But even so the good outweigh the bad, and the app is still in development so it will only get better from here. Heartily recommended!</p>
<h2>UI prototyping with Omnigraffle</h2>
<p>For laying out the user interface, I've fallen in love with Omnigraffle. In comparison its a hugely expensive piece of software, but in essence you get what you pay for. Omnigraffle is a hugely powerful program, and once you've mastered its (intuitive) interface you'll be mocking up interfaces in no time at all.</p>
<p>Perhaps even more important - through Omnigraffle's excellent multiselection tools it is very easy to manipulate an existing mockup, enabling to try out different layouts as quickly as you can think them.</p>
<p>[[posterous-content:fFmvdEpJJvEAzgtuaqjc]]</p>
<p>Omnigraffle is based around the concept of stencils, which work a bit like LEGO bricks; there are lots of different pre-made parts (like for instance the various parts of the iOS UI) which you can import into your diagram, letting you quickly scaffold your prototype.</p>
<p>And of course it is also easy draw free-hand objects, when there isn't a stencil within immediate reach that suits your needs.</p>
<p>An indirect negative note: Omnigraffle sells itself also as a flowchart maker, and I've seen examples of mindmaps done with it, too. In both of these fields, however, Omnigraffle really cannot compete with neither iThoughts nor Instaviz.</p>
<p>But, when it comes to prototyping, it really is a beast, and in my mind the rich feature list and easy of use justifies the hefty price tag.&nbsp;</p>
<h2>Doodling with Drawing Pad</h2>
<p>Charts and mindmaps and UML and OOAD and software engineering in all its glory - sometimes you just need to doodle! When overcome by that urge, our favourite tool is Drawing Pad. Super-easy to use, yet still surprisingly powerful.</p>
<p>[[posterous-content:eclHEIxxtJFFcpaabjnw]]</p>
<p>There are several more professional drawing apps out there, but for us that kind of misses the mark - our doodle needs are, per definition, basic and immediate, and thus we need a basic and immediate app to fulfill them. Paint instead of Photoshop, so to say. Drawing Pad fits this role perfectly</p>
<h2>Coding and code-reviewing with Textastic</h2>
<p>As initially stated, we first sketch and doodle and map on the iPad, and then move on to coding on our MacBooks. Sometimes, however, you'll want to hack down some code while doodling, or maybe quickly read/review some existing code in order to know how to proceed with the current flowchart. Then it is convenient to have the possibility to do so directly on the iPad, and not having to change devices.</p>
<p>[[posterous-content:qsuzytFFFvfIzdklEvke]]</p>
<p>When this happens, we turn to Textastic. Expensive in comparison to its competitors, but again, you get what you pay for. A very nice interface and excellent Dropbox support has won us over.&nbsp;</p>
<p>But, isn't coding on the iPad rather cumbersome? Yes, definitely, even if Textastic does what it can to easify the experience through extra characters on the keyboard, etc. But the point isn't to compete with coding on the computer (which it could never do), but to provide an ok experience when some instant coding needs to be done in connection with some doodling in the other apps.&nbsp;</p>
<p>And, as stated above, we frequently find ourselves wanting to read some specific code while planning, and to this end Textastic works perfectly.</p>
<h2>File sharing with Dropbox</h2>
<p>Ok, so focus was on the design process, but now I've mentioned Dropbox too many times not to give it its own headline. Dropbox is a brilliant tool for sharing files, and especially well suited for the development flow consisting of all of the above mentioned apps.&nbsp;</p>
<p>[[posterous-content:AlybBJvyCIIkbCrJrfzF]]</p>
<p>We'll make a Dropbox folder for our project, and then from the other productivity apps we'll export the result to that folder. For the apps that don't support Dropbox (like Instaviz) we export a photo, which we can then put into the folder using the Dropbox app.</p>
<h2>What we're still missing</h2>
<p>Perhaps it doesn't sort directly under the desing flow headline, but we still haven't managed to settle for a project management / todo list application. This definitely impedes us, especially since neither me nor my brother are the most organised people to begin with. So, if you guys out there have any favourites, please try to sell us on them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Titanium application structure – learning from Tweetanium]]></title>
    <link href="http://krawaller.github.com/krablog/titanium-application-structure-learning-from/"/>
    <updated>2011-02-16T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/titanium-application-structure-learning-from</id>
    <content type="html"><![CDATA[<p>Up until recently, like so many other lost souls, we've followed the same Titanium application structure as Appcelerator's KitchenSink application. In this paradigm, when you want to open a new window, you'd typically do something like this:</p>
<script src="https://gist.github.com/829615.js?file=openingwindow.js"></script>

<p>Inside somefile.js the window would be populated with controls, using the Ti.UI.currentWindow reference. We can access the data from the previous window through win.importantdata.</p>
<p>This approach, even when improved upon, has several disadvantages:</p>
<ul>
<li> If you have a file with application helper functions, you need to import that in every other file that needs the functionality. In my Tristania app for example, pretty much every file starts with Ti.include(&ldquo;../assets/utils.js&rdquo;).</li>
<li> Every time a window is meant to be created, the relevant file must be read and code parsed.</li>
<li>The structure of the app becomes rather opaque.</li>
<li>It is very difficult to unittest this approach.</li>
</ul>
<p>It all works, sure, but I've never been comfortable with my application structures, feeling there must be a better way. Even though there are (many) ways to improve on the above example, I wanted a different structure paradigm alltogether. Alas, I was too lazy to get around to experiment with it, so &ldquo;it remained but a beautiful thought&rdquo;, as we say in Sweden.</p>
<p>Fortunately, <a href="http://twitter.com/kevinwhinnery">Kevin Whinnery</a>, <a href="http://twitter.com/chadauld">Chad Auld</a> and the rest of the Appcelerator team have no such character flaws! Recently they <a href="http://developer.appcelerator.com/blog/2011/01/tweetanium-source-code-release.html">opensourced Tweetanium</a>, a fully functioning Twitter client coded with best practices regarding both JavaScript in general and Titanium in particular.</p>
<p>Which was like christmas to me! The only non-Krawaller Titanium source code I've gleaned (with a few none-noteworthy exceptions) is the aforementioned KitchenSink, which &ndash; let's be honest &ndash; is not a great piece of work at all. It demonstrates the API very well (which is great since the docs are crap), but as an application example, it leaves me wanting.</p>
<p>So, enter Tweetanium. As soon as you open up the sourcecode, it is evident that they're doing things very differently! I have created a stripped-down, barebones version of it called Struct, aiming to expose the new structure paradigm. You'll find the git repo <a href="https://github.com/krawaller/struct">here</a>. This is what it looks like &ndash; isn't knowledge beautiful? :)</p>
<p>[[posterous-content:GjClsyjFxfyzfhrEvEFH]]</p>
<p>The main point in the Tweetanium approach is that my various files (like somefile.js in the above example) are not messing with Ti.UI.currentWindow &ndash; instead, it augments a global namespace with a constructor variable. In Struct, I end up with the following global object:</p>
<script src="https://gist.github.com/829615.js?file=globalobject.js"></script>

<p>The program flow is that the otherwise pretty empty app.js imports struct.js, which can be considered your main app definition file. This file creates the global namespace and maybe some utility functions, and then includes the other files to populate the rest of the namespace.</p>
<p>This means that as soon as the struct.js file is included, the entire app structure is created in memory. No more parsing of files will be done during the session.</p>
<p>App.js will then call the createApplicationWindow function, call the open method on the returned window, and maybe do some other app initialization stuff. Now the app is up and running! In Struct, app.js looks like this:</p>
<script src="https://gist.github.com/829615.js?file=app.js"></script>

<p>So what are the great advantages to this approach? I've already found quite a few, but it boils down to a single keyword: closure. Every single function is executed in the same closure (ok, maybe subclosures, but you get the gist). Read that sentence again until the implications set in.</p>
<p>This is good news from a performance perspective (and most likely stability) &ndash; no more importing the same file a gazillion times! But from an infrastructure point of view its even yummier:</p>
<ul>
<li> As we always have access to the same scope, we can keep app-wide data in a single object, instead of JSON:ing back and forth with Ti.App.Properties. </li>
<li> All kinds of other convenience 	structures are suddenly very easy to build. In Struct there is a global messaging system, using one single view, instantiated only once. Tweetanium does a similar thing with a loader view, and has a 	very neat Model baseclass thing going. </li>
<li> You can instantiate all app windows and views immediately, as they all live in the same closure. Windows opened at a later point will also live in the same closure, since that's where the constructor function is defined. </li>
<li> Creating your own navigation system ("immersive UI", to use Apple's lingo) is a breeze. In Struct I've stolen the home-brewed tabs from Tweetanium. </li>
</ul>
<p>Now, having autopsied Tweetanium, created Struct and looking at the layout before me, it seems very obvious and self-evident. Perhaps it already was to the rest of you, but for me it was a new-found revelation, and I can't wait to test it out in our next project! So, for those of you who like me hadn't caught on to this train before, check out <a href="https://github.com/krawaller/struct">Struct</a> &amp; <a href="http://developer.appcelerator.com/blog/2011/01/tweetanium-mobile.html">Tweetanium</a> and try it out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Releasing Auktionera, a Tradera iPhone app]]></title>
    <link href="http://krawaller.github.com/krablog/releasing-auktionera-a-tradera-iphone-app/"/>
    <updated>2011-02-03T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/releasing-auktionera-a-tradera-iphone-app</id>
    <content type="html"><![CDATA[<p style="padding-left: 30px;"><strong>Update</strong>: As Tradera finally saw sense and ported the eBay app, we're pulling the Auktionera app from the App Store! One has to choose one's battles...&nbsp;</p>
<p>As Jacob wrote the Livetanium post 2 months ago, I remember us vowing to keep up the pace in the content flow to this blog. That was, as stated, two months ago, and this place has been tumbleweeding ever since. Epic fail, as the kids (<a href="http://thebestpageintheuniverse.net/c.cgi?u=epic" target="_blank">erroneously</a>) say these days!&nbsp;</p>
<p>One of our excuses is a pretty intense development of an iPhone app for the swedish auction site Tradera, which is now released to the App Store! <a href="http://itunes.apple.com/se/app/id416520953">Here</a>'s a shop link, and we also created a little <a href="http://auktionera-app.se" title="Auktionera app support site" target="_blank">support site</a> with some more information (in Swedish).</p>
<h3>Functionality</h3>
<p>The app is a pretty standard auction site app, much like the eBay one. You can peruse auctions, bid, create your own auctions, save favourite searhes / users / auctions, check seller history, etc.</p>
<p>[[posterous-content:ItBjeFqdGnhGEbvbsdwz]]</p>
<p>Made with love and care, but pretty boring, in other words. This was also our approach as we entered the project. We weren't&nbsp;really intrigued by the technical challenges, but&nbsp;thought this had a good chance of selling well. This mainly because there <a href="http://itunes.apple.com/us/app/id363997028?mt=8" title="The competition!" target="_blank">already was an app in the store</a>, selling better than our Systemet in spite of being rather crap.&nbsp;</p>
<p>This competing app is getting flak because of two different things:</p>
<ul>
<li>It is, as stated, rather crappy, being very prone to crash. Also some functions have ceased to work after the latest iOS upgrades.&nbsp;</li>
<li>It relies completely on <a href="http://api.tradera.com/" title="Tradera API" target="_blank">Tradera's official API</a>, which for whatever reason is missing some vital functionality, such as checking out a seller's previous history. This is, naturally, something that an auctioneer want to be able to do, before taking the plunge and risking those hard-earned dimes!</li>
</ul>
<p>Our tactic was therefore a mirror image of this list:</p>
<ul>
<li>Make sure the app doesn't crash and burn!</li>
<li>Complement the official API functionality with some YQL scraping on the side.</li>
</ul>
<p>Sounded easy enough, but it turned out that none of the above was as straight-forward as we thought..</p>
<h3>Titanium stability</h3>
<p>After a lengthy development cycle in Titanium and the emulator, we did a first reality test on an actual device. We weren't really worried, as the app flowed very neatly in the emulator. But, as we fired it up on the phone, we discovered to our dismay that we had managed to copy the very fickleness we wanted to avoid! The app would crash in random places, not leaving any definite clues as to why.&nbsp;</p>
<p>Not until we ran the app in an emulator next to the activity monitor did we find out why. It turned out that Titanium did some things rather inefficiently, which would eventually cause the phone to run out of memory or processor juice. The same thing happened in the emulator, but there it wouldn't hit the ceiling as soon, as the computer has much more resources.&nbsp;</p>
<p>So, what were these inefficient things that Titanium did? Well:</p>
<ul>
<li>First off - <strong>don't handle XML</strong> in your app, unless you can avoid it. XML is of course painful in and of itself, but Titanium's garbage collection somehow cannot clean up after xml parsing. Try it: open a new window, parse some XML, then close that window (using the back button, for example), and watch the processor usage spike, never to drop again.&nbsp;</li>
<li>Be careful when doing <strong>advanced table creation</strong>. Use the best practices detailed in the <a href="http://assets.appcelerator.com.s3.amazonaws.com/docs/API_UITableViewClass.pdf" target="_blank">documentation</a>, and test your table generation with the Activity indicator running. For some combinations of table gymnastics, the memory usage will be intolerably high, eventually making the app crash.</li>
<li>If you have a large data structure, <strong>prefer a sqlite database</strong> to just keeping a big object in memory. This might be obvious to the rest of the world, but took us a bit off guard - intuitively, we thought it would be more efficient to keep a single object and query that, skipping the overhead cost of a database. However, some testing proved us very wrong indeed - the sqlite database is quicker and uses far less memory.</li>
</ul>
<p>So we learned some specifics, but the main lesson for us was this: do <strong>frequent reality checks</strong> on an actual device. Titanium is still a young framework with many rough edges, and some of those edges will not cut you in the emulator since that does not correctly emulate the hardware limitations.&nbsp;</p>
<h3>YQL + Tradera = somewhat true</h3>
<p>We also had a rough time with the intermingling of official functionality and our home-brewed YQL-fueled queries. There were several authentication and authorization models involved; the Tradera API requires an App-Id, the user must be authenticated through the API, and also through the official site for our scraping to work.&nbsp;</p>
<p>When starting off, we had all this in a spaghetti-bowl of code in the app. Lots of moving parts, lots of things that could break at any time. Not until we isolated all of this to a PHP-bridge did the different parts fall into place. This is of course what we should have done from the beginning - separations of concern is something we frequently preach to others. But somehow we fooled ourselves into thinking we'd already done this, as we has lots of logic in the YQL OpenTables. The lesson: you can always abstract your code one step further. :)</p>
<h3>API design IS an artform</h3>
<p>The biggest challenge, however, was actually using the Tradera API. I now realize that I've taken usability and intuitivity for granted in the API:s that I use, not thinking much of it. It's like appreciating your mom doing all the household chores - you don't, until you move out. I had no idea that designing a good API takes work, until I used a bad one.</p>
<p>Now, you shouldn't bite the hand that feeds you, but the Tradera API is pretty horrid. There seems to be no general rule for naming functions (camel casing, lower case, it's the wild west in there). The same property names mean different things in different functions. Documented properties are sometimes populated, sometimes not, depending on the weather and alignent of planets. Functionality between functions overlap, but never so much that you can ignore one function and just use the other.</p>
<p>And, most jarringly - there are several spelling errors in the API! When first creating our infrastructure to make calls, I tested it using the most simple function "GetOfficialTime", requiring no parameters and just returning a flat data object. It didn't work. Several hours later of reading SOAP specs and going through the code, I found the error - I needed to spell it "GetOfficalTime", note the missing "i". Fast forward a few weeks, and the same thing happened again when we tried to filter out used goods with the search parameter "ItemCondition". It was supposed to be "ItemConditon", again note the missing "i".&nbsp;</p>
<p>In Tradera's&nbsp;defense, the misspellings are also present in the documentation, and they offer free support for developers using the API, which we found very helpful. But still, it made me better at appreciate good API design. And more on my guard when using them.</p>
<h3>The result</h3>
<p>In the end we feel pretty proud of the result! This in spite of entering the project with little heart, and being in some serious stability trouble mid-journey. So, now to the boring side of things - pushing the app, spreading the word. As previously lamented, this is not what we do best.</p>
<p>Anyhow, hope the Swedish speakers among you will check the app out! Next up, Jacob will do a (less chatty) write-up on his neat method for deploying app builds to testers, right, brother? The pressure is on!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Livetanium]]></title>
    <link href="http://krawaller.github.com/krablog/livetanium/"/>
    <updated>2010-12-01T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/livetanium</id>
    <content type="html"><![CDATA[<p>We're proud to announce our latest experiment - <strong>Livetanium</strong> - realtime prototyping for Titanium Mobile.</p>
<p><a href="http://krawaller.se/livetanium.swf" title="Livetanium walkthrough"><img src="http://posterous.com/getfile/files.posterous.com/temp-2010-12-01/jxHAyfibaCbprllDiquvjCDDHaesbhztwicqqcesrgtDbgEBkEbuEIyuFyBi/livetanium.jpg.scaled500.jpg" height="313" alt="" width="500" /></a></p>
<p>Made out of titanium, nodejs and unicorns, our Livetanium library lets you code Titanium Mobile apps and see changes in realtime. It uses a nodejs server to pipe filechanges to the app, and these changes are applied in realtime. It's iPhone only at the moment, but works in both the simulator and on the actual device. You can <a href="http://krawaller.se/livetanium.swf" title="Livetanium walkthrough">see a quick walkthrough here </a>or check out <a href="https://github.com/krawaller/Titanium-Tools/tree/master/Resources/tools/livetanium/" title="Livetanium source code">the source</a>.</p>
<p>Please try it out and let us know what you think!</p>
]]></content>
  </entry>
  
</feed>
