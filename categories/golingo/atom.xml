<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: golingo | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/categories/golingo/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-04-05T14:37:02+02:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Opensourcing Golingo]]></title>
    <link href="http://krawaller.github.com/krablog/opensourcing-golingo/"/>
    <updated>2010-05-18T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/opensourcing-golingo</id>
    <content type="html"><![CDATA[<p>Hey folks! Thanks for sticking with us even when we're not the fastest guys around. I'm <em>rea-he-lly</em> glad to give you this promised behind the scenes post of how Golingo came to be. In case you've been sleeping under a rock (without any means of browsing the intertube), here's a quick recap for you: Golingo is our rudely addictive word game for the iPhone - it was released about a month ago, as one of the first to use the totally revised 1.0 branch of <a href="http://www.appcelerator.com">Appcelerator</a>'s <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/">Titanium Mobile</a>. It is currently the <strong>#1 word game</strong> in the Swedish App Store. Fun stuff!</p>
<p>If you're not at all interested in how to create top paid apps using only Titanium with JavaScript, HTML5 and CSS3, this post not for you. Otherwise, please go ahead!</p>
<p>The code is hosted <strong><a href="https://github.com/krawaller/Golingo">here</a></strong> at our brand spanking new Github account. Hold your horses or check it out straight a way!</p>
<p>[[posterous-content:pmbIdvfjEuDqxpIsAvca]]</p>
<p>But let's start from the beginning. Golingo was born from a thoroughly cosy word game played using Scrabble©-tiles at Café Agape in the tiny Swedish fishing village of <a href="http://www.bovallstrand.com/bovalldir-s/bilder.html">Bovall</a>. We've tried to create an electronic adaption that stayed true to the concept of a blazingly quick, enthralling word juggling game. But how did we do it? Come along!</p>
<p>The first experimental version was created as part of a school project back in 2008. It wasn't much more than a concept, but still hade multiplayer capabilities courtesy of <a href="http://orbited.org/">Orbited</a>. Back then it looked like this:</p>
<p>[[posterous-content:wwAdaDjyktyGdmtmIFdt]]</p>
<p>It fell out of grace in my busy brain while some other idea events bubbled up to my master node. But at the 16th of febraury this year, I coudn't hold it back any more - I had to have a neat project to try Titanium Mobile out, and there it was in the back of my head. I pulled it out and started prototyping straight away. I'm a hands on, iterative programmer, so I quickly got some initial results looking slightly ugly, but still promising.</p>
<p>[[posterous-content:vDfDkEfyDhHeCmjstlac]]</p>
<p>Everything in-game is pure JavaScript, HTML5 and CSS3, which made it possible to develop the game itself in Safari, and dropping it into Titanium only when it was almost done. This was crucial to keep up the speed and sanity during development. Titanium is a great piece of software, but it doesn't have very good debugging capabilities, especially not for webviews. And Safari/Chrome/Webkit Nightly have extremely good debugging tools for both logic (JavaScript) and presentation (HTML and CSS), so why not use them?</p>
<p>I decided to use as many tools as possible to simplify my work, which resulted in the following toolbelt:</p>
<ul>
<li><a href="http://www.appcelerator.com/products/titanium-mobile-application-development/">Titanium Mobile</a></li>
<li> <a href="http://www.w3.org/Style/CSS/current-work">CSS3</a> with <a href="http://www.webkit.org">Webkit</a> <a href="http://webkit.org/blog/324/css-animation-2/">extras</a> </li>
<li><a href="http://www.jquery.com">jQuery 1.4.2</a></li>
<li><a href="http://www.danwebb.net/2008/2/3/how-to-use-low-pro-for-jquery">Low Pro for jQuery</a></li>
<li><a href="http://www.glyphish.com">Glyphish icons</a></li>
<li><a href="http://blog.stevenlevithan.com/archives/parseuri">Uri-parser</a></li>
<li><a href="http://www.dsso.se">Swedish word list</a></li>
<li><a href="http://www.couchdb.org">CouchDB</a></li>
<li><a href="http://www.nordicfactory.com/creative/illustrations/download-free-flag-set-in-png/">Flag icons</a></li>
</ul>
<p>In hindsight, I would probably have replaced jQuery with XUI or tailored code. jQuery is wonderful to use, but it's a bit heavy on mobile devices both to load and during execution. However, it does save time for the developer, so it's not a crystal clear choice. Also, make sure that you keep up with the flow of new exiting tech that might relieve your work - for example both <a href="http://www.css3please.com">css3please.com</a> and <a href="http://www.cssdesk.com">cssdesk.com</a> were release during Golingo's development.</p>
<p><span style="font-size: medium;">The Construction</span></p>
<p>Most of the actual game was made in a few weeks time, but from scratch to published app it took almost six weeks of part time work. A lot of this time was spent banging my head into various walls. Again, Titanium is great, but it's a young framework with all the kinks that follows. There has been quite a few bugs, and the documentation hasn't always been up to date - but this is much better nowadays. What more - since most other developers are as clueless as yourself, It's been hard finding <a href="http://developer.appcelerator.com/apidoc/mobile/latest">good resources</a> and <a href="http://developer.appcelerator.com/questions/created">getting help</a>. I did however get a trial for Appcelerator's Premium Subscription, with 48-hours guaranteed response, and I must say it's really good stuff. The developers themselves answers all your stupid questions and relieves most of the wall banging. If you can afford it, <a href="http://www.appcelerator.com/products/plans-pricing/">go for it</a>!</p>
<p>By releasing the code for Golingo, we hope to relieve some of the headaches surrounding developing packaged HTML5 apps. I do not say that it's not full of faults, because it is, but at least it is a <strong>working example</strong> full of faults. Please don't hesitate to dig through the code to see what is going on. We believe we've solved some common problems that you too will run in to when using Titanium, for example transparently calling native functions from a webview (and vice versa) using callbacks and trickery. Here's a quick recap of that:</p>
<p><span style="font-size: medium;">Connecting Titanium Contexts</span></p>
<p>Your Titanium application is built up of javascript files. There is a main file called app.js which is responsible for bootstrapping your applicaiton. As a matter of fact, you could actually put <strong>all </strong>your code in app.js, but that is only viable for very small apps. Therefore Golingo consists of lots of different files - pretty much one file per window and some util libraries. Whenever you open a webview or a window with a url pointing to a js file, they run their code in a new context - meaning you cannot easily communicate with app.js or any of your other windows or webviews. Or at least, you couldn't had the brilliant minds behind Titanium not given us app-wide events. But since they are brilliant, and they do have given us app-wide events, let's use them to let the different parts of the app communicate.</p>
<p>A common problem with this event-driven way of programming is that you cannot pass functions transparently back and forth between contexts since the event bridge serializes all passed data. Because of this, most people have a hard time figuring out how to call a function in another context and pass the result back to a callback specified in the calling function. We use a pattern looking something like the following, where we hijack the event firing and handling functions to hack in support for transparent callbacks.</p>
<p><script src="https://gist.github.com/403742.js"></script></p>
<p><span style="font-size: medium;">Low Pro like a low pro</span></p>
<p>Another nice library helping the development of Golingo is <a href="http://www.danwebb.net/">Dan Webb</a>'s <a href="http://www.danwebb.net/lowpro">Low Pro</a>. Low Pro is used to make it a breeze to attach beaviour to elements, and does it well. All our letters and boards should behave the same way, so they're all instances of the Letter and Board classes respectively. We ended up using Low Pro in a very basic way, but it does actually have support for inheritance as well as event binding and delegation. Our code should probably be rewritten to more accurately follow Low Pro and it's object oriented ways, but coding in a hurry sometimes results in less than perfect code. We'll fix that as soon as there is peace on earth. Nevertheless, I get a warm feeling from being able to just write:</p>
<p><script src="https://gist.github.com/404905.js"></script></p>
<p><span style="font-size: medium;">Sexifying</span></p>
<p>In Titanium, you use JavaScript to create and layout native elements and windows. This is incredibly powerful out of the box, but my feeling is that Appcelerator care more about laying the groundwork and creating the low level functions than making a sexy API. This is totally fine by me. I love that their focus means a quickly maturing API. But since I'm also all about the sexy programming, I've taken on the sexifying part. In Golingo, we started this journey by abstracting the menu creation somewhat. However, these we're only the first baby steps.</p>
<p>After finishing Golingo, I've been working on a few different Titanium based projects. And the more I do work with Titanium, the more I like what you can achieve, but also the less I enjoy how Titanium does it out of the box. It's way too verbose and clumsy for my liking. Also, there is no good way of separating the layouting from the element creation. Since I love HTML and CSS, I decided to do apply them to Titanium. The result is not present in the current Golingo release, but I'll talk about it in an upcoming blogpost. Here is a sneak peek of an exampe:</p>
<p><script src="https://gist.github.com/404953.js"></script></p>
<p>Even though the HTML parsing might mean too much of a overhead for big files, a better layouting mechanism is needed, but I'll elaborate on that subject in an upcoming post.</p>
<p><span style="font-size: medium;">Get dirty</span></p>
<p><span style="font-size: medium;">[[posterous-content:xoiclCBHymycFdExjuuv]]</span>I had planned to get the code in super trim and add an interactive playing guide as well as multiplayer capabilities and other goodies before releasing the source, but I realised there's not really any need to wait. If you're brave enough to wade through sometimes somewhat semi-stupid code, you should be free to do so, and not wait for our utopian dream. Maybe you could even give us a helping hand at fixing all these new fancy features. For example, it shouldn't be too hard getting most of the game to run on Android. Palm should also be within reach if you break out of Titanium or write a shim for it! I dare you!</p>
<p>I repeat: the code is hosted <strong><a href="https://github.com/krawaller/Golingo">here</a></strong> at our brand  spanking new Github account. Isn't it time for you to dive in?</p>
<p>[[posterous-content:bomImsqFuqIIzgaGqAkD]]</p>
<p>We are very curious what you'll do with the code and all. We'll continue to develop Golingo as well as other cool apps, so stay tuned as usual. Also, we promise to catch up on the HTML5 vs Objective-C series, where we'll try to match the basic functionality of popular apps in a days worth of programming. Please feel free to leave tips for what apps you'd like to see us take on in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 1 - The intestines of a good puzzle game]]></title>
    <link href="http://krawaller.github.com/krablog/the-intestines-of-a-good-puzzle-game/"/>
    <updated>2010-04-29T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/the-intestines-of-a-good-puzzle-game</id>
    <content type="html"><![CDATA[<p>Having finally got <a href="http://blog.krawaller.se/krawaller-proudly-presents-golingo">Golingo out the door</a> and into the app store, we’re in the process of dreaming forth our next project. While Golingo will keep us occupied for some time to come;</p>
<ul>
<li>As my brother promised, he’s going to <strong>detail the creation</strong> of it in a forthcoming post, highlighting the use of web technologies and the benefits of the Titanium Framework. Start typing, Jacob! [edit: read that post <a href="blog.krawaller.se/opensourcing-golingo">here</a>]</li>
<li>Community feedback has given more than enough ideas for an <strong>update</strong>, so Jacob is now working on a new version containing..            
<ul style="margin-left: 3em;">
<li>more languages (initial release has English and Swedish)</li>
<li>more game modes</li>
<li>wifi multiplayer (to complement the split-screen multiplayer already in place)</li>
</ul>
</li>
<li>We’re also considering getting an <strong>Android version</strong> out, which will hopefully result in a blog post on what that transition will entail. The fact that web apps are (mostly) platform independent is one of the main arguments against using Objective C, and this conversion will put that to the test. Will it suffice to simply throw a switch in Titanium and search&amp;replace some proprietary CSS, or is a more deep-going refactoring needed?</li>
<li>Of course we also want to keep <strong>pushing Golingo sales</strong>, trying our hand at the very strange field of internet marketing. We are completely oblivious as to what makes success there, so it’s a journey of discovery (advice much appreciated!). Golingo did however recently reach the 1000 units sold mark, meaning an wage of $2 per development hour! We just need to release 49999 more apps to get our Mediterranean beach house!</li>
</ul>
<p>But, being developers we need to develop, so in parallel to the Golingo caretaking we’ve also started <strong>hunting down the next idea</strong>. Now, like all of you we of course have several dream projects that we’re itching to work on, projects of life-fulfilling promise but of equal complexity. Time, however, is in short supply – Jacob is in the process of securing a contract to create a travel planner application for a major Swedish infrastructure company, and I spend 80% of my time teaching mathematics &amp; programming to the inmates of <a href="http://www.kriminalvarden.se/sv/English/">society’s penalty box</a>. I’ve finished the <a href="http://blog.krawaller.se/tag/ria_university_course">Advanced JavaScript course</a> for <a href="http://lnu.se/?l=en">Linnaeus University</a>, but still, 1 free day a week (minus household chores) doesn’t amount to much. So with the <a href="http://blog.krawaller.se/web-design-lessons-from-an-angry-carpenter">lessons from the angry carpenter</a> fresh in memory, I realised we need to keep things simple and our heads on our shoulders.</p>
<p>Because of that, and because it’s also in line with a common perversion of ours, we decided to create some kind of <strong style="">puzzle game</strong>. They are by nature rather confined, and might therefore be doable within our limited time. I earned my programming badge in the dungeons of a beautiful <a href="http://en.wikipedia.org/wiki/Multi_User_Dungeon">MUD</a> called <a href="http://midnightsun2.org:3328/">Midnight Sun</a>, where one of my favourite pastimes was making puzzles for the heroes to solve, so as to put their wit to the test and not just their character’s stats. I’m hoping I can draw on that experience to shorten development time even further.</p>
<p>Now, being a mathematician, I started thinking – what actually constitutes a good puzzler? Are there some mathematical traits that we need to pursue or avoid? There are some obvious answers:</p>
<ul>
<li> <span>First off, the idea needs to be both <strong>simple and clearly defined</strong>. The rules of our universe must be few and unambiguous. Take <a href="http://www.subwayshuffle.com/">Subway Shuffle</a>, an early iPhone favourite of mine. To play it, you only need to know that...</span> 
<ul style="margin-left: 3em;">
<li>You can move all cars, but only along tracks with the same colour</li>
<li>Only one car per station at a time</li>
<li>The goal is to get your red car to the big red station.</li>
</ul>
</li>
<li>You need to have a <strong>rich choice tree</strong>. Here Subway Shuffle becomes an anti-example – at any given point you only have very few options available, and more often than not the correct one is also the only one, if you eliminate backtracking.</li>
<li>There also needs to be some <strong>possibility of lookahead</strong>. If the game is completely opaque and you’re not      sure how you’re doing, it’s hard to have fun. <a href="http://nonverbal.ch/colorbind.html">Colorbind</a> is an excellent example of this, where it’s always possible to deduct how close you are to your goal, and whether or not you can get there from the current point. Side point: Colorbind is also really beautiful, which definitely doesn’t hurt sales nor gaming experience.</li>
<li>However, the <strong>lookahead shouldn't be too allowing</strong>. Case in point: <a href="http://www.mobigame.net/">Cross      Fingers</a>. After having stared at the board for a while and having realised how to solve a level, the actual solving is just a tedious walk through the motions.</li>
</ul>
<table class="pictable" border="0" style="margin-left: 15px; text-align: center;">

<tr>
<td valign="bottom"><img title="subway shuffle" src="http://dl.dropbox.com/u/2287145/livepics/subwayshuffle.jpg" alt="subway shuffle" /></td>
<td valign="bottom"><img title="colorbind" src="http://dl.dropbox.com/u/2287145/livepics/colorbind.jpg" alt="colorbind" /></td>
<td><img title="cross fingers" src="http://dl.dropbox.com/u/2287145/livepics/crossfingers.jpg" alt="cross fingers" /></td>
</tr>
<tr>
<td><span style="font-style: italic; font-size: 0.9em;">Subway Shuffle</span></td>
<td><span style="font-style: italic; font-size: 0.9em;">Colorbind</span></td>
<td><span style="font-style: italic; font-size: 0.9em;">Cross Fingers</span></td>
</tr>

</table>
<p>Having reread the above list umpteen times without managing to come up with a novel idea of our own, we eventually decided to do like all successful developers - <strong>steal one</strong>! There are innumerable basic puzzle concepts that have been reincarnated more times than Buddha, and can therefore be considered part of the public domain.</p>
<p>One such concept quickly rose to the top of our list of potential thieving targets: <strong>Labyrinth</strong>. At least, that's what the first reincarnation I encountered was called, which I played in the attic on my father's Macintosh more than 20 years ago. You've all experienced it in one form or other, I'm sure. Below is a screenshot from <a href="http://www.mikegagnon.com/roadblocks/rb1.html">Roadblocks</a>, a more recent (but less beautiful) flash incarnation:</p>
<p style="margin-left: 15px;"><img title="Roadblocks" src="http://dl.dropbox.com/u/2287145/livepics/roadblocks.JPG" alt="Roadblocks" /></p>
<p>The idea is very simple: You have to reach the goal. You're able to travel in any cardinal direction, but cannot stop mid-flight. In a way, you could say you're controlling gravity - whenever you press an arrow key (or tilt the iPhone, perhaps?) in a certain direction, the player object will travel as far as possible in that direction.</p>
<p>And, that's pretty much it! I think the simplicity explains the longevity of this seemingly bland concept. The labyrinth will always be much smaller than it seems, since only a few positions are actually reachable. To make things more interesting and to increase the branches on the choice tree, various spices are usually added: teleports, breaking blocks, etc. So while the basic concept is simple enough to implement, there seems to be ample opportinuty to breathe some fresh air into it all by thinking up new ways to spice things up!</p>
<p>Having finally decided on what to aim for, I sat down to make a sketch of the project. First I jotted down some basic thoughts &amp; premises:</p>
<ul>
<li>We will of course follow the path Golingo cleared, and program this game using <strong>only web technologies</strong>. Probably we'll pack it up in Titanium, but we don't need to make that decision until way further down the path.</li>
<li>To allow for lots of exotic spices, I want to make an <strong>abstract, flexible game engine</strong> that can easily incorporate the new ideas which will inevitably pop up along the line (movable blocks! enemies! multiple player objects! levers! inventory! delayed effects! etc etc ad infinitum).</li>
<li> <a href="http://www.mobygames.com/developer/sheet/view/developerId,4217/">Will Wright</a> has many claims to fame, but for me the most important lesson he taught is that of the humongous size of peoples' pride. How come <a href="http://thesims.ea.com/">The Sims</a>, a game by definition utterly boring (your characters use the toilet, for Christ's sake), has had such a remarkable success? It is based on user generated content, that's why! Incorporating a <strong>level editor</strong> into our game would be a neat way to capitalise on that, as well as making it easier for us to create the levels to be packaged with the game.</li>
<li>Since we're short on both time and graphics skill, we'll use our otherwise unhealthy fascination of new web tech to give the game a simple but hopefully <strong>stylish look using mostly (only?) CSS</strong>.</li>
<li>I also want the game to <strong>feel at home on the iPhone</strong>. Colorbind is again a prime example, using the touchscreen and gimmicks (shake the phone to clear what you've done) to great effect. Contrast this to <a href="http://itunes.apple.com/us/app/puzzlequest-chapter-1-and-2/id300573601?mt=8" title="Puzzle quest">Puzzle Quest</a>, which was ported straight to the platform without any regards as to what makes it special, leaving the game feeling rather alien to play.</li>
</ul>
<p>A further brainstorming session in front of this list gave birth to the idea of the <strong>Analyzer</strong>. If we are to allow players to make levels of their own, they need to have some tools to make sure that their level is actually solvable. So why not put all game logic into this tool? I'm going to make a module that analyzes a given level, and spits out a data object containing all possible board positions, and the connections between them. That allows us not just to check the integrity of a level, but also to sort them difficultywise programmatically. </p>
<p>The <strong>gaming module</strong> will therefore not contain any game logic at all, but just perform the animations when transitioning from one state to another, and keep track of the current state. This should allow for a very neat separation of concerns in the codebase.</p>
<p>It also makes the whole project split neatly down the middle, meaning me and my brother can wrestle with one half each! I already have most of the Analyzer code written down in my head (I have an editor in my brain, but unfortunately it can't yet run any code), so I'm going to call dibs on that. Which will suit Jacob fine, as he's quite skilled in the CSS graphics department anyway - he made Golingo using almost no actual pictures, save the wooden background. </p>
<p>So that's where we're at now! I'm in the process of writing some specs of the data objects to be passed around, but when that's done we can both get to work individually, without depending on the progress of one another. Time (and a <a href="http://blog.krawaller.se/puzzle-app-step-2-data-structure">follow-up post</a>) will tell how it all turns out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Krawaller proudly presents Golingo]]></title>
    <link href="http://krawaller.github.com/krablog/krawaller-proudly-presents-golingo/"/>
    <updated>2010-03-30T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/krawaller-proudly-presents-golingo</id>
    <content type="html"><![CDATA[<p>Hey folks!</p>
<p>We're very proud to announce <a href="http://itunes.com/apps/golingo" title="Golingo" target="_blank">our first app on the App Store -  Golingo</a>.</p>
<p>[[posterous-content:wsBjFbslkCjEjbvGqFIk]]</p>
<p>What started out as a simple board game in a cosy café is now a full featured and oh-so-funny digital adaption of the very same. OK, so it's a nice app and all, but what is there to be excited about for a web dev as yourself? Here's a list for ya:</p>
<ul>
<li>Not a single line of Objective-C written, courtesy of <a href="http://www.appcelerator.com">Titanium Mobile</a>
</li>
<li>Only one (!) image ingame - the rest is CSS3 magic</li>
<li>Fluid gameplay thanks to CSS Transitions and Animations</li>
<li>
<strong>All</strong> logic using pure, beautiful JavaScript</li>
<li>Multitouch draggables using iPhone Touch API</li>
<li>Logic encapsulated using Low Pro - meaning split screen mode was easy pie</li>
<li>jQuery 1.4.2 for development speed (and sanity of developer)</li>
<li>CouchDB as highscore storage, with storage logic in JavaScript</li>
<li>Predictable randomness means replayable games, all courtesy of excellent <a href="http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html">seedrandom</a>
</li>
</ul>
<p>How sweet is that? Well, quite a lot, but it's not enough. Here comes an even sweeter treat for you - we're planning to write an <strong>in depth post </strong>fleshing out all the details about the development, from idea to implementation. And on top of that, we'll <strong>open source the whole code</strong>, so you can see just how easy and beautiful it can be to create awesome apps. How about that?</p>
<p>Oh, and in the upcoming versions we're planning to implement both local multiplayer using bonjour, and online multiplayer using nodejs and WebSockets. These are exiting times...</p>
<p><span style="font-size: large;">Score</span></p>
<p>Objective-C: 0</p>
<p>HTML5, JavaScript and CSS3: 2</p>
<p> </p>
<p>...to be continued</p>
]]></content>
  </entry>
  
</feed>
