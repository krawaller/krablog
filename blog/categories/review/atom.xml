<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: review | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/blog/categories/review/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-02-24T17:04:19+01:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Krawaller's iPad design flow - productivity app recommendations]]></title>
    <link href="http://krawaller.github.com/krablog/krawallers-ipad-design-flow-productivity-app/"/>
    <updated>2011-03-26T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/krawallers-ipad-design-flow-productivity-app</id>
    <content type="html"><![CDATA[<div class="summarytext">Reviewing our favourite iPad productivity apps!</div>


<p>While waiting for my younger brother to post some long-promised content, I thought I'd give a quick overview of our design flow iPad usage. When I first got my pad, I bought it mainly as a testing device, not really anticipating to use it as an actual productivity tool. Because let's face it, in what fields could it possibly bester my trusted MacBook Pro?&nbsp;</p>


<p>In quite a few, as it turned out! Obvious as it might be to the rest of the world, a touch screen is a very different input device compared to a touchpad and keyboard. And, as I eventually realised, it is especially well suited for sketching and doing mockups.&nbsp;</p>


<h2>Our design process</h2>


<p>We've always done quite a bit of planning before we got our hands dirty in the editors. This planning can take many different forms; napkin scribbles, phone conversations, whiteboard doodling, and sometimes an actual UML diagram.&nbsp;</p>


<p>This initial sketching would cover all aspects of the application-to-be: program flow, data structures, use cases, and UI layout. Mostly we'd go through several iterations, and only when things began to settle down a bit did we fire up the editors.&nbsp;</p>


<p>This flow remains the same, but what the iPad has allowed us to do is to digitize the first part. Doing those things on the computer was never an option; it's simply too slow! There are plenty of good mindmap/diagram/software-planning programs for MacOS, but none that can keep up with the speed of thought.&nbsp;</p>


<p>On the iOS, it turned out, it's a different story, all thanx to the touchpad. Using this input device, you can sketch and mock-up almost as fast as you can think it!&nbsp;</p>


<p>We never thought of our disorganized doodling as consisting of different sketching paradigms such as mindmapping, flowcharting, etc. It was all something inbetween, crossing haphazardly back and forth between approaches. Now, using iPad apps instead of napkins, this process has broken down into several main areas:</p>


<ul>
<li><strong>mindmapping</strong> - organizing thoughts together</li>
<li><strong>flowcharting</strong> - mapping the flow through a single interaction/function/event chain</li>
<li><strong>prototyping</strong> - mocking up user interfaces or parts thereof</li>
<li><strong>doodling</strong> - simple free-hand sketching</li>
<li><strong>codehandling</strong> - reading existing code bases</li>
<li><strong>filesharing</strong> - using cloud file handling services</li>
</ul>


<p>And here follows a quick run through our favourite tool for each of these areas!</p>


<h2>Mindmapping with iThoughts</h2>


<p>First off: mindmapping. This can be used initially just to sort app ideas together, but also in a later stage to map out the ingredients of the app: UI parts, classes, globals, etc. In essence this is our rebellious interpretation of a UML class diagram, I guess.&nbsp;</p>


<p>[[posterous-content:HcnidBeAAyybnydkaDzG]]</p>


<p>To this end, our favourite tool has come to be iThoughts HD. There are a lot of various options, of which I've tried most, but iThoughts somehow just resonates with me. Some favoured features are:</p>


<ul>
<li>Organisation of maps: a fundamental feature, you might think, but it is missing from a surprisingly huge number of mindmapping apps. iThoughts lets you organise maps in folders and subfolders. It is also very easy to base a map upon another, copy them, etc.</li>
<li>Excellent export options. And with excellent I mean that it supports our file handling system of choice, namely Dropbox. It can synchronize automatically to a map in the cloud, and also of course export into other formats.</li>
<li>Brilliant UI shortcuts throughout, minimizing clicks and gestures. It is very evident that the developers have invested lots of time in making the mapping process as smooth as possible.</li>
<li>Perhaps not a feature, but the maps are, with very little effort, rather beautiful! Not a factor to sneer at, and a potential client frequently reacts much better to an iThoughts-generated pdf than to our previous napkin-based charts...</li>
</ul>


<h2>Flowcharting with Instaviz</h2>


<p>When zooming in a bit at the process and planning out a user interaction (or even a specific application function), flowcharting is an excellent way to visualize your thoughts. Again there are a multitude of options of which I've sampled most, but the one that stuck out from the crowd is Instaviz.&nbsp;</p>


<p>[[posterous-content:uhFCsjmEhmkecdiDfusu]]</p>


<p>Instaviz boasts having an advanced layout algorithm developed over the course of decades, and this immediately shows. Not having any control of the actual layout and position of boxes takes some getting used to, but once you have it's really convenient. The algorithm will always (so far completely without exception) find an excellent way to organize the boxes, so that the flow is easy to follow and as few connections as possible cross each other.</p>


<p>Now, there are some irks; Instaviz has no chart organisations (they're all just lying in one huge list, meaning you have to prefix the names with project and milestone in order to navigate), and perhaps worse, there is no way to select more than one box at a time. There are a few other rough edges in the UI as well, such as having to delete the default text in a label, etc.&nbsp;</p>


<p>But even so the good outweigh the bad, and the app is still in development so it will only get better from here. Heartily recommended!</p>


<h2>UI prototyping with Omnigraffle</h2>


<p>For laying out the user interface, I've fallen in love with Omnigraffle. In comparison its a hugely expensive piece of software, but in essence you get what you pay for. Omnigraffle is a hugely powerful program, and once you've mastered its (intuitive) interface you'll be mocking up interfaces in no time at all.</p>


<p>Perhaps even more important - through Omnigraffle's excellent multiselection tools it is very easy to manipulate an existing mockup, enabling to try out different layouts as quickly as you can think them.</p>


<p>[[posterous-content:fFmvdEpJJvEAzgtuaqjc]]</p>


<p>Omnigraffle is based around the concept of stencils, which work a bit like LEGO bricks; there are lots of different pre-made parts (like for instance the various parts of the iOS UI) which you can import into your diagram, letting you quickly scaffold your prototype.</p>


<p>And of course it is also easy draw free-hand objects, when there isn't a stencil within immediate reach that suits your needs.</p>


<p>An indirect negative note: Omnigraffle sells itself also as a flowchart maker, and I've seen examples of mindmaps done with it, too. In both of these fields, however, Omnigraffle really cannot compete with neither iThoughts nor Instaviz.</p>


<p>But, when it comes to prototyping, it really is a beast, and in my mind the rich feature list and easy of use justifies the hefty price tag.&nbsp;</p>


<h2>Doodling with Drawing Pad</h2>


<p>Charts and mindmaps and UML and OOAD and software engineering in all its glory - sometimes you just need to doodle! When overcome by that urge, our favourite tool is Drawing Pad. Super-easy to use, yet still surprisingly powerful.</p>


<p>[[posterous-content:eclHEIxxtJFFcpaabjnw]]</p>


<p>There are several more professional drawing apps out there, but for us that kind of misses the mark - our doodle needs are, per definition, basic and immediate, and thus we need a basic and immediate app to fulfill them. Paint instead of Photoshop, so to say. Drawing Pad fits this role perfectly</p>


<h2>Coding and code-reviewing with Textastic</h2>


<p>As initially stated, we first sketch and doodle and map on the iPad, and then move on to coding on our MacBooks. Sometimes, however, you'll want to hack down some code while doodling, or maybe quickly read/review some existing code in order to know how to proceed with the current flowchart. Then it is convenient to have the possibility to do so directly on the iPad, and not having to change devices.</p>


<p>[[posterous-content:qsuzytFFFvfIzdklEvke]]</p>


<p>When this happens, we turn to Textastic. Expensive in comparison to its competitors, but again, you get what you pay for. A very nice interface and excellent Dropbox support has won us over.&nbsp;</p>


<p>But, isn't coding on the iPad rather cumbersome? Yes, definitely, even if Textastic does what it can to easify the experience through extra characters on the keyboard, etc. But the point isn't to compete with coding on the computer (which it could never do), but to provide an ok experience when some instant coding needs to be done in connection with some doodling in the other apps.&nbsp;</p>


<p>And, as stated above, we frequently find ourselves wanting to read some specific code while planning, and to this end Textastic works perfectly.</p>


<h2>File sharing with Dropbox</h2>


<p>Ok, so focus was on the design process, but now I've mentioned Dropbox too many times not to give it its own headline. Dropbox is a brilliant tool for sharing files, and especially well suited for the development flow consisting of all of the above mentioned apps.&nbsp;</p>


<p>[[posterous-content:AlybBJvyCIIkbCrJrfzF]]</p>


<p>We'll make a Dropbox folder for our project, and then from the other productivity apps we'll export the result to that folder. For the apps that don't support Dropbox (like Instaviz) we export a photo, which we can then put into the folder using the Dropbox app.</p>


<h2>What we're still missing</h2>


<p>Perhaps it doesn't sort directly under the desing flow headline, but we still haven't managed to settle for a project management / todo list application. This definitely impedes us, especially since neither me nor my brother are the most organised people to begin with. So, if you guys out there have any favourites, please try to sell us on them!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review - JavaScript Patterns]]></title>
    <link href="http://krawaller.github.com/krablog/book-review-javascript-patterns/"/>
    <updated>2010-10-10T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/book-review-javascript-patterns</id>
    <content type="html"><![CDATA[<div class="summarytext">Does Stoyan Stefanov's latest book deserve a place on the bookshelf of a JavaScript ninja, in spite of having a partridge on the cover? Read on to find out!</div>


<p>Back in April, Yahoo's JavaScript guru&nbsp;<a href="http://www.phpied.com" title="Stoyan's blog" target="_blank">Stoyan Stefanov</a> set a very ambitious goal for himself; to <a href="http://www.phpied.com/publishing-5-books-this-year/" title="Stoyan's promise" target="_blank">publish 5 books</a> before the end of the year. An amazing feat, even when accounting for his generous definition of the task.</p>


<p>So, how did he fare? Well:</p>


<ol>
<li>His "High Performance WebSites for <span style="text-decoration: line-through;">dummies</span> designers" book titled <a href="http://www.pearsoned.co.uk/bookshop/detail.asp?item=100000000397964" title="Speed Matters at Peachpit Press" target="_blank">Speed Matters</a> has been postponed to January 2011...</li>
<li>...and there's no sign of the promised 2nd edition to 2008's <a href="https://www.packtpub.com/object-oriented-javascript-applications-libraries/book" title="Object Oriented JavaScript at Packt" target="_blank">Object Oriented JavaScript</a>...</li>
<li>...nor the "CSS for web devs" project.</li>
<li>But - his participation in <a href="http://nczonline.net/" title="Nicholas Zakas blog" target="_blank">Nicholas Zakas</a>' <a href="http://oreilly.com/catalog/9780596802806" title="High Performance JavaScript at O'Reilly" target="_blank">High Performance JavaScript</a> worked out beautifully, as <a href="http://blog.krawaller.se/book-review-high-performance-javascript" title="High Performance JavaScript review" target="_blank">previously extolled</a> on this blog...</li>
<li>...and now, O'Reilly has released <a href="http://oreilly.com/catalog/9780596806767" title="JavaScript Patterns at O'Reilly" target="_blank">JavaScript Patterns</a>&nbsp;(JSP), a solitary book project from Stoyan on design and coding patterns in JavaScript development.</li>
</ol>


<p>[[posterous-content:jJjeAFEJdykivBcCpetC]]</p>


<p>Does this book deserve a place on the bookshelf of a JavaScript ninja, in spite of having a partridge on the cover? Read on to find out!</p>


<h3>Assumed knowledge</h3>


<p>First question, is it at all meant for the ninjas? The book claims to be "targeted&nbsp;at professional developers and programmers who want to take their JavaScript skills to the next level". That's all well and good, but we've been let down by such phrases before, when the authors didn't want to lock out the much bigger and therefore more profitable beginner / intermediate audience, and so diluted the advanced concepts with lots of basic cruft.&nbsp;</p>


<p>This, however, does not happen in JSP. Stoyan states in the preface that the basics not tying in directly to the ongoing discussion will not be covered at all, and refers instead to a list of suggested reading for those not feeling prepared enough. And throughout the book he stays true to this mission statement, consistently <strong>assuming that the reader is well versed in both JavaScript and general programming paradigms</strong>.&nbsp;</p>


<p>This makes for a very rewarding read, where focus is kept on the matters at hand. That's not to say that it will all be new-found revelations - the first chapter presents JavaScript the language, and the second chapter (titled "Essentials") goes through the established canon of best practices. However, the former is but a few pages, and the latter is so&nbsp;succinct and well-written that I still felt rewarded after reading it, even though I've heard (almost) all of it before. &nbsp;</p>


<h3>The "Pattern" concept</h3>


<p>Now, I've been looking forward to JavaScript Patterns (JSP) ever since Stoyan's initial announcement, but the title also gave me some concern - books that are <strong>forced into an artificial mold</strong> rarely sit right with me. Take the similar cookbook approach, with the<a href="http://oreilly.com/catalog/9780596159788" title="jQuery Cookbook at O'Reilly" target="_blank"> jQuery Cookbook</a> as a somewhat recent example - while the recipe structure has its merits, that book and most of its likes would be better off organized as a "normal" book on the subject.</p>


<p>There's no major difference between the jQuery Cookbook and, for example, <a href="http://www.manning.com/bibeault2/" title="jQuery in Action 2nd edition at Manning" target="_blank">jQuery in Action</a>. They both strive to be an all-covering go-to resource for jQuery development. But while the latter is cleanly&nbsp;organized&nbsp;and easy to use, the former is marred by the recipe concept, which sometimes seems to mean "very specific task", and then in the next chapter it is suddenly synonymous with "this broad subject".&nbsp;</p>


<p>As given away by the title, Stoyan's book is organised in a similar fashion. Here, however, <strong>the mold fits the text like a glove</strong>. In no small part thanks to the fact that the author takes great care to define exactly what he means by "pattern", what different flavours he considers the word to encompass, and how this applies to the structure of the book. In the case of JSP, the mold is not a populistic way to make it seem more accessible, but an honest and successful attempt to organise the information.</p>


<p>Also, Stoyan isn't a slave to the structure, and doesn't feel forced to include the word "Pattern" in every headline. When he sees the need to break the mold he does so.</p>


<h3>How VS why</h3>


<p>Also, a proper pattern collection / cookbook would probably be more like a phrasebook - <strong>serving finished solution<em>s</em></strong>&nbsp;without explaining the nuts and bolts, and thus be of little interest to people actually wanting to learn the language. I've always shunned such books, finding that I have shorter journey if I take the time to equip myself first with an understanding of the basics.</p>


<p>Stoyan has had a recurring column in&nbsp;<a href="http://www.jsmag.com" title="JSMag homepage" target="_blank">JSMag</a>&nbsp;titled "JavaScript Patterns", in which we've been served snack-sized previews of this book. In the magazine, however, there isn't much room to elaborate on the context, so the articles in question has mostly consisted of inventorying the different ways to accomplish something (how to define an object literal, how to define a function, etc). Recipes, you could say, or phrases, if you're in a worse mood. While interesting on an academic level, I rarely looked up from one of those articles thinking "hey, I can use this". They justified their own existence, they <strong>explained for the sake of explanation</strong>, but without much connecting discussion about real-world application.&nbsp;</p>


<p>And that was my fear - that the book, like the articles (and OOJS, to a degree), would list the different ways to create an object / emulate class inheritance / bind a function to a context / etc, without providing discussion or meaning. But, as previously stated, JSP is very different from the articles. Stoyan&nbsp;gives <strong>ample room to discussing the why</strong>, and all (well, most) patterns are defined with a clear goal and a problem space. We're not simply being told "42", but also what the question in question actually is.</p>


<p>A prime example is his chapter on inheritance - he opens it by stating that code reuse is the objective, and that the dynamic nature of JavaScript provides other and easier means to achieve that end than the classical inheritance of strongly typed languages. In fact, the chapter isn't even called inheritance, but code reuse. He of course covers emulating classes, but in a context of discussing the (lack of) merits of that approach compared to other available solutions.</p>


<h3>Comparisons</h3>


<p>Here's a few comparisons between JSP and some other tomes you might already have:</p>


<ul>
<li><a href="http://apress.com/book/view/159059908x" title="Pro JavaScript Design Patterns at Apress" target="_blank">Pro JavaScript Design Patterns</a>:&nbsp;PJSDP is an excellent book, in which Ross Harmes and Dustin Diaz sets out to convert the design patterns popularized in the game-changing <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612" title="Design Patterns at Amazon">Design Patterns: Elements of Reusable Object-Oriented Software</a> into JavaScript. This, however, means focusing on a classical approach borrowed from languages with strong types and interfaces. We might be feeling at home with that, but we would be better off embracing JavaScript's dynamic, loosely typed nature, and find solutions that work best in this environment. This is what JSP provides. And, JSP discusses "patterns" in a broader sense - where PJSDP is only concerned with design patterns, JSP hovers higher and also talks about coding patterns, meaning paradigms in a wider sense; best&nbsp;practices, work flows, approaches, etc. I will continue to enjoy PJSDP, but JSP is where I'll go for real-world help.</li>
<li><a href="http://oreilly.com/catalog/9780596802806" title="High Performance JavaScript at O'Reilly" target="_blank">High Performance JavaScript</a>: There is some overlap here, as JSP adresses some patterns regarding performance. These are all also found in HPJS, covered in greater detail. But mostly the books live in different problem spaces, and there's no reason not to have both in your shelf.&nbsp;</li>
<li><a href="https://www.packtpub.com/object-oriented-javascript-applications-libraries/book" title="Object Oriented JavaScript at Packt" target="_blank">Object Oriented JavaScript</a>:&nbsp;OOJS has already been&nbsp;unfavorably&nbsp;compared to JSP several times in this review. There is a lot of overlap between the two, but where OOJS sets out to verbosely explain <strong>everything</strong> about object-oriented JavaScript (and everything you need to understand that explanation), JPS adresses only the bits relevant to the discussion at hand. JPS is way more succinct, and because it assumes you already have a good foundation, it can afford the luxury of high-level discussion. So: they are very similar, but JSP is the more mature of the two, speaking to a more experienced audience.</li>
</ul>


<h3>The bottom line</h3>


<p>I enjoyed JSP even more than I thought I would. Through being one of the few JavaScript books that dares exclude the beginner crowd completely, I would buy it no matter what. But it is definitely worth reading also from its own merits, as it is full of thoughtful discussion that is bound to expand your horizons even if you are a very seasoned JS developer. So - go get!&nbsp;</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review - JavaScript Testing]]></title>
    <link href="http://krawaller.github.com/krablog/book-review-javascript-testing/"/>
    <updated>2010-09-30T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/book-review-javascript-testing</id>
    <content type="html"><![CDATA[<div class="summarytext">Reviewing Packt's latest offering on JavaScript testing. Ninja lore or newbie lark? Find out here!</div>


<p>[[posterous-content:kxyrlHfdoJlJtBzFaxgt]]</p>


<p>Before we start off, I must admit to my purchase being a badly researched one. I saw the title of this book glancing by in a Packt ("Since you bought X you might be interested in Y") email, and clicked the Purchase button before realising that this book has absolutely  nothing to do with <a href="http://my.safaribooksonline.com/9780321684097" target="_blank">Test-driven JavaScript Development</a>&nbsp;that I was really setting out to buy. However, aspiring to be well versed in JavaScript literature in general because of the JavaScript course I hold at Linnaeus University, I didn't cancel my order. Had I bothered to read through the Table of Contents more throroughly, I would have.</p>


<p><a href="https://www.packtpub.com/javascript-testing-beginner%3F%3F%3Fs-guide/book" title="book page on Packt" target="_blank">JavaScript Testing - A Beginner's Guide</a>, by Liang Yuxian Eugene, is a very strange beast. It assumes no prior knowledge whatsoever, and so sets out to explaining everything from basic JavaScript syntax and programming paradigms (without separating the two) to how JavaScript fits together with HTML and CSS. All this is done with a focus on testing, but taking care to explain <strong>everything</strong> as it goes along. This makes for a very peculiar read for newbie and ninja alike.</p>


<p>Mundane content aside, the book is <strong>very</strong> verbose, to the point of  the forest being lost among the trees. For example, the author spends an entire page (chapter 3, page 95) explaining how to fix the "error" of JSLint complaining about "unexpected use of ++". Not with a discussion about the pros and cons, but by repeating a huge chunk of code, the first using ++, then changed to +1. There are definitely times when being verbose helps  getting the point across, especially when trying to communicate the basics of a paradigm new to the receiver. What's going on here, however, is pure page bloat. Considering that the book is only 250 pages total, that does not paint a flattering picture of the weight of the actual content.</p>


<p>The book is also suffering from the usual Packt flaws;</p>


<ul>
<li>The typesetting is really strange. I realise that smarter people than me has considered the made choices, but I'll never get used to the strangely fat,  seriff-lacking font used for the basic text.</li>
<li>Since they often have several headlines on each page, the bloated Table of Contents  is rather useless, providing no overview. I really miss Apress' "Contents at a Glance" concept, which is sorely needed here.</li>
</ul>


<p>In all fairness, the book does has some merits. The testing focus equips the reader with a good set of best practices, building up a good workflow which makes for less headaches during development. I gave the book flak for being too verbose, but I guess you could also argue that it is rigorous.</p>


<p>There is, however, nothing in there for the more advanced reader (which the subtitle "Beginner's Guide" partly excuses, but nevertheless). Unit testing gets a brief mention, but in a context that makes it seems rather periferal. Debugging with alert, if you judge by the number of devoted pages, is much more important according to this book.</p>


<p>I feel the basic problem with the book is the  premise - it targets a complete novice, aiming to teach him JavaScript, programming  and development planning, all done with a focus on "testing". But, if  you don't know some or any of these field, the content in this book is nowhere near enough. And if you DO know them, and just want to hone your testing skills and  mindset, the avalanche of superfluous information will keep you from doing so.</p>


<p>To conclude: there are some good advice in there, but they would come more to their right as a (much) shorter tutorial article.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review - High Performance JavaScript]]></title>
    <link href="http://krawaller.github.com/krablog/book-review-high-performance-javascript/"/>
    <updated>2010-04-16T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/book-review-high-performance-javascript</id>
    <content type="html"><![CDATA[<div class="summarytext">Is the town of JavaScript performance big enough for both Souders &amp; Zakas? Can High Performance JavaScript hold its own against Even Faster Websites? Catch the captivating conclusion here!</div>


<p><em>Is the town of JavaScript performance big enough for both Souders &amp; Zakas? Can the newly released book High Performance JavaScript hold its own against the established bible Even Faster Websites? Catch the captivating conclusion here!</em></p>


<p>[[posterous-content:ICwhddDkIhIispwxrxzB]]</p>


<p>Nicholas Zakas, of <a href="http://www.amazon.com/Professional-JavaScript-Developers-Wrox-Programmer/dp/047022780X/">Professional JavaScript for Web Developers</a> authoring fame, recently had his latest book released, titled <a href="http://oreilly.com/catalog/9780596802806/">High Performance JavaScript</a> (HPJS). Having found <a href="http://www.nczonline.net/">his blog</a> to be an excellent resource on JavaScript insights, I was very much looking forward to this book. The fact that he&rsquo;d also enlisted frontend rock stars such as...</p>


<ul>
<li> <a href="http://www.phpied.com/">Stoyan Stefanov</a>, performance guru, writer of <a href="https://www.packtpub.com/object-oriented-javascript-applications-libraries/book">Object Oriented JavaScript</a> </li>
<li> <a href="http://techfoolery.com/">Ross Harmes</a>, co-author of the very excellent <a href="http://jsdesignpatterns.com/">Pro JavaScript Design Patterns</a> </li>
<li>Matt Sweeney, YUI architect</li>
<li> <a href="http://blog.stevenlevithan.com/">Steven Levithan</a>, regexp wizard extraordinaire</li>
<li> <a href="http://www.julienlecomte.net/blog/">Julien Lecomte</a>, Yahoo! frontend engineer</li>
</ul>


<p>...to contribute chapters didn&rsquo;t do much to damper my excitement, so I was childishly happy when the book finally knocked on my door last week!</p>


<p>The title of the book is of course a throwback to <a href="http://stevesouders.com/">Steve Souders</a>&rsquo; epitomous <a href="http://stevesouders.com/hpws/">High Perfomance Web Sites</a>, released a few years back by the same publisher. In much the same way it covers all aspects of performance in its chosen realm. That book gained Souders much appraise for making the web developer community at large aware of the various performance issues connected to the frontend, and how &amp; why optimizing time was better spent there than on the backend which had previously been the prime target for such efforts. Last year Souders piggybacked on that appraise by releasing a sequel titled <a href="http://stevesouders.com/efws/">Even Faster Websites</a> (EFWS), where he &ndash; along with a group of co-authors, including Zakas &ndash; delved even deeper into frontend performance.</p>


<p>Souders&rsquo; first book touched on JavaScript here and there but in EFWS it plays a much more dominant role, being the focus of half of the chapters. Even though the context is still websites, the insights it offers can easily be applied to any realm in which JavaScript performance is a concern. This is why we used it as course literature for our <a href="http://blog.krawaller.se/tag/ria_university_course">university course on developing JavaScript RIA applications</a> where it was much appreciated by the students, even though we weren&rsquo;t making websites as such. I myself love the book, and it is one of the most thumb-through tomes on my shelf.</p>


<p>My being a part of EFWS fandom was also the reason behind my prime fear regarding HPJS &ndash; just how big would the overlap between the two turn out to be? After all, the ideas behind them seem almost identical (minus the website bits); have a team of JavaScript performance ninjas each write a piece on their individual expertise. Would it really be justified to have these two books in the same shelf? Is this town big enough for the two of them?</p>


<p>Definitely yes. While a Venn diagram would show quite a bit of overlap;</p>


<ul>
<li>HPJS chapter 1 (Loading and Execution) is largely made up of the same content as EFWS chapter 4 (Loading Scripts without blocking)</li>
<li>EFWS chapter 7 (Writing Efficient JavaScript) contains the gist of HPJS chapters 4 (Algorithms and Flow      Control), 6 (Responsive Interfaces) and 8 (Programming Practices)</li>
<li>Most of HPJS chapter 9 (Building and Deploying High-Performance JavaScript Applications) can be found sprinkled across various EFWS chapters</li>
</ul>


<p>...the books have enough diverse content, difference in tone of voice and primary focus, to make for two quite different reads.</p>


<p>The question of unique content, I feel, is largely moot anyway, as it is very rare to find a book containing knowledge that cannot be found elsewhere. That&rsquo;s not a bad thing, it&rsquo;s just the way of the web. When buying a programming book, you&rsquo;re paying for the convenience of having lots of related material collected in one place. The research behind HPJS chapter 2 (Data Access), for instance, has been detailed on Zakas&rsquo; blog, just as Stoyan has already blogged a lot of what ended up in chapter 3 (DOM Scripting).</p>


<p>So downrating the book for being a &ldquo;compilation&rdquo;, as one of the few not-so-positive amazon reviewers does, is rather unfair and beside the point. HPJS should be judged, instead, by how well it weaves it all together, and of course by the quality of the individual chapters. In my book, it receives top scores in both of these categories.</p>


<p>Some co-authored books while inevitably feel rather fragmented. There are moments in EFWS when the (very) different writing styles of contributing authors gets in the way of seeing the whole picture. Similar moments arose for me while reading the semi-recent <a href="http://oreilly.com/catalog/9780596159788/">jQuery CookBook</a>, which &ndash; while excellent &ndash; at times feels very schizophrenic. Of course co-authors need to be given some artistic leeway as to how they express themselves, but when they seem to have different takes on the main ideas behind the book, it becomes a problem.</p>


<p>This never happens in HPJS, which obviously has been the target of some very loving editing. Even though the different performance aspects have quite a different flavour, as does the writing of the contributing authors, you never lose the sense of context. The fact that the book stays true to its gospel &ndash; performance &ndash; is one of its biggest strengths.</p>


<p>There must have been innumerable temptations to mention non-performance related things that could be made to sort under a chapter&rsquo;s domain, but not fit inside the book as a whole. I&rsquo;m sure, for example, that Steven Levithan bit his tongue while writing the (brilliant!) chapter on regexes, forcing himself not to share parts of his vast regexp knowledge that doesn&rsquo;t relate directly to performance. Because he and his peers withstood that temptation, HPJS is a better book.</p>


<p>Also worth mentioning is how succinct the book is. It is not very thick, but the information density is very high. While maybe not everyone&rsquo;s cup of tea, this is something I very much appreciate. Much like how&nbsp;<a href="http://crockford.com/">Crockford</a>&rsquo;s renowned <a href="http://oreilly.com/catalog/9780596517748/">JavaScript &ndash; The Good Parts</a> delivers the message in few but well-chosen words without much air between them, HPJS is very clear and efficient in its teachings, with no filler content to increase page count.</p>


<p>Another merit is the &ldquo;general knowledge level&rdquo; of the content. Mostly, the teachings in the book are applicable to whatever JavaScript coding you&rsquo;re doing, today and in five years from now. We recently <a href="http://blog.krawaller.se/book-review-building-iphone-apps-with-html-cs">sang the praise</a> of <a href="http://jonathanstark.com/">Jonathan Stark</a>&rsquo;s new <a href="http://oreilly.com/catalog/9780596805791/">book on iPhone web apps</a>, making that same point &ndash; it gives you ideas, which won&rsquo;t be made obsolete when the involved API:s inevitably change a few steps down the path.</p>


<p>So, to finally bottom-line this; the promised showdown never happened. EFWS and HPJS are partly speaking about the same things, but in different voices under different headlines to different people. Also, HPJS is a bloody brilliant book, and not owning it should be reason enough for ostracication from the frontend community.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book review - Building iPhone Apps with HTML, CSS and JavaScript]]></title>
    <link href="http://krawaller.github.com/krablog/book-review-building-iphone-apps-with-html-cs/"/>
    <updated>2010-02-12T00:00:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/book-review-building-iphone-apps-with-html-cs</id>
    <content type="html"><![CDATA[<div class="summarytext">Just how good is Jonathan Stark's new book on iPhone web app development? Find out here!</div>


<p>I've just finished <a href="http://oreilly.com/catalog/9780596805791/">Building iPhone Apps</a> by <a href="http://jonathanstark.com/">Jonathan Stark</a>, and what an excellent read it is! My little brother has spent ages and ages trawling docs and blogs and forums, gathering the knowledge he needed to <a href="http://blog.krawaller.se/html5-vs-objective-c-round-1">bester objective C with JavaScript</a>. I had pretty much given up on the hope of ever catching up with him, but thanks to mr Stark we can now do it in just 150 pages! This book really is a remarkable feat; in spite of it's short span, it manages to deliver the full picture on what constitutes making web apps on the iPhone.</p>


<p>But it's not just the quality of the contained knowledge that makes the book rock, but the way in which it is delivered. This is one of those few and far between books that simply manages to get everything right; the tone, the examples, the difficulty level, explanation lengths, text/code/picture ratio - it is evident that a lot of love and care went into its making. Early on Jonathan states that...</p>


<blockquote class="posterous_short_quote">Theory is great, but I'm a "show me, don't tell me" kinda guy.</blockquote>


<p>...and this philosophy is evident throughout the book. It is full of accompanying examples, illustrating pictures and table overviews. The code segments are often annotated, with points of interest explained in further detail. Many times Jonathan introduces new concepts in the code and explains them afterwards in this manner, instead of giving that theory ahead of the example. This works really well, giving the book a very practical feel, in spite of communicating some quite advanced concepts. The teacher in me is full of professional envy and admiration!</p>


<p>So who is this book meant for? Jonathan assumes basic knowledge of HTML, CSS, JavaScript and jQuery, enabling him to focus on the subject: how to apply your existing web development skills to building iPhone web applications. He'll teach you how to architect the application using jQTouch, how to apply some manifest magic to make it available offline, how to nativify it using Phonegap, and finally how to deploy it to the app store. In other words the answer to the whom-for question is you, by the virtue of the fact that you're reading this blog. Other reviews have labeled the book as being for novices, but I'd wager they're letting themselves be fooled by the low threshold of the book, mistaking the accessibility for entry-level knowledge. The ideal reader is someone well versed with front-end development, wanting to extend into the mobile space. </p>


<p>However, Stark's obvious proficiency with web technologies makes this book a boost not only to your iPhone app knowledge, but to your web development skills in general. I found several golden nuggets of things I didn't previously know sprinkled throughout the code, like how jQuery's load function argument can include a selection, or how you can make trailing ellipsis using CSS only. That might say more about my ignorance, but the fact remains that the code examples given are of a very high quality throughout.</p>


<p>Another thing I really appreciate is that Jonathan not only explains the details of app weaving, but takes care to give you the big picture. This, I feel, is something that's often lacking in books of this nature. Dan Wellman's jQuery UI springs to mind - it's an excellent book, but apart for a short overview in the first chapter, the rest of it is spent with the nose one inch above the floor, discussing minute details of the API. Jonathan could have taken a similar route here, but he makes sure to always put things into context before he dives into the details. Thus, reading this book will really give you a helicopter view of what constitutes iPhone web app creation; the difference between web and native apps, what problems jQTouch solves, what role Phonegap plays, etc. This knowledge will remain relevant long after jQTouch/Phonegap is changed or toppled by some other framework, ensuring that this book will age well (while the jQuery UI book was obsolete before it made publication). </p>


<p>Also there is the eerie fact that Jonathan can read your mind! Several times during my reading session a question would pop up, only to be answered by Jonathan in the very next paragraph. Couldn't I apply the rounded corners to the ul directly, instead of to the first and last li? Wondered I. No, Jonathan immediately responds in a note on the next page, explaining why that wouldn't work. Hey, why not use a CSS-sprite instead of two pics? I asked. I turn the page, and sure enough, Jonathan has anticipated my question and gives a succint answer. In fact, when putting the book down after having finished it, I can't think of a single concern of mine not having been put at ease in a similar fashion. Almost made me throw a glance over my shoulder...</p>


<p>All in all, I warmly recommend you pick up this book. It gives you the full lowdown on building iPhone web apps, and it does so in a really brilliant way.</p>

]]></content>
  </entry>
  
</feed>
