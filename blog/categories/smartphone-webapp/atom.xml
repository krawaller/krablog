<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: smartphone_webapp | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/blog/categories/smartphone-webapp/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-02-24T17:07:40+01:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Systemet]]></title>
    <link href="http://krawaller.github.com/krablog/systemet/"/>
    <updated>2010-07-03T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/systemet</id>
    <content type="html"><![CDATA[<div class="summarytext">Announcing the release of our new app! Behind-the-scenes bean spillage to follow.</div>


<p>Yeay!</p>


<p>[[posterous-content:dcEoHdApAizvGeFbqvJI]]</p>


<p>We just wanted to let you know that our third app, <a href="http://itunes.apple.com/se/app/systemet/id379391397?mt=8">Systemet</a>, just <a href="http://itunes.apple.com/se/app/systemet/id379391397?mt=8">went live in the App Store</a>. It's an inofficial guide to the<span style="font-family: arial, sans-serif;"><span style="line-height: 15px; font-size: small;"> Swedish Alcohol Retail Monopoly Systembolaget, and it lets you:</span></span></p>


<p><span style="font-family: arial, sans-serif;"><span style="line-height: 15px; font-size: small;"> </span></span></p>


<ul>
<li>Search for nearby stores</li>
<li>See store opening times</li>
<li>Call the store directly</li>
<li>Search for products</li>
<li>Sort by name, price and other properties</li>
<li>See product info, qualities, suitable recipes etc</li>
<li>Find the closest store with a certain product in stock</li>
<li>Save your favourite stores, products, searches and recipes</li>
</ul>


<p> </p>


<p>We'll spill all the beans about the development of Systemet later, but I can tell you right now that it took some serious Titanium, HTML5, and YQL wizardry to make this happen, and that our "database" is a plain ol' Google Docs Spreadsheet.</p>


<p>Curious, ha? Stay tuned!</p>


<p> </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 3 - revving up the engine]]></title>
    <link href="http://krawaller.github.com/krablog/puzzle-app-step-3-revving-up-the-engine/"/>
    <updated>2010-07-03T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/puzzle-app-step-3-revving-up-the-engine</id>
    <content type="html"><![CDATA[<div class="summarytext">Having finished the level analyser, work starts on actually finishing the game. Read up on the process and try out the playable prototype here!</div>


<h3>Excusing the sound of silence</h3>


<p>And suddenly a whole month went by! But we haven't just been idling around playing <a href="http://carcassonneapp.com/" title="Carcassonne app official homepage">Carcassone</a> all day (at least not just) - this past month has seen several wheels being set in motion;</p>


<ul>
<li>An <strong>iPad/iOS4-friendly version of <a href="http://blog.krawaller.se/tag/golingo" title="Posts on Golingo">Golingo</a></strong> is waiting in the wings! Come on, little brother, type faster!</li>
<li>We're awaiting Apple's approval for our next AppStore application [edit: app is now live, read announcement <a href="http://blog.krawaller.se/systemet">here</a>] - an <strong>inofficial app for <a href="http://www.systembolaget.se/hem/" title="Systembolaget">Systembolaget</a></strong> (where swedes go buy their alcohol, since we're not trusted to do so without government supervision). There <a href="http://itunes.apple.com/se/app/hittabolaget/id328888218?mt=8" title="HittaBolaget appstore link">already is one</a> on the market, but our not-so-objective opinion is that we blow that out of the water since&nbsp;Titanium &gt; ObjectiveC (and also&nbsp;good design &gt; bad design).</li>
<li>Communications are underway with the manufacturers behind our very favourite <strong>boardgame</strong> regarding taking it to the iPad/iPhone (inspired by the brilliant appification of Carcassone, which we're absolutely not playing all day all the time). Hopefully we can spill some more beans on that in the somewhat near future!</li>
<li>Continuing the trend of placing ourselves at risk of severe starstruckness, we've also begun development of the <strong>official app for our favourite metal band</strong>. Huge amounts of fun, and having an excuse to communicate with these long-time heroes of ours is simply awesome. Further beanspilling to follow here too [edit: check the related posts <a href="http://blog.krawaller.se/tag/tristania">here</a>] .&nbsp;</li>
<li>Our biggest pastime, however, has been <strong>involvement with a very promising startup</strong>, spearheaded by a driven entrepeneur duo with a great idea and the know-how to make it happen. Seeing these guys in action has been a privilige; we might have some badass technical knowhow, but direction, ambition, organisation, efficiency and all those adjectives - not so much. So being able to piggyback on them has been a very educative ride. And, you guessed it; more beans later.&nbsp;</li>
</ul>


<p>All this action invariably meant less playtime for our less serious (read: turnover-potent) inhouse project, which demoted our puzzle game to the back burner. But before <span style="text-decoration: line-through;">Carcassone took us over completely</span> things got too busy, we did managed to make quite a bit of progress, which is what we wanted to share in this post!</p>


<h3>Analyse this</h3>


<p>First and foremost, the<strong> analyser module is finished</strong>. It turned out to be an almost AliceInWonderlandesque journey into some rather esotheric recursive gymnastics, so if you're into that sort of thing, do dive into the code and check it out (the code repository can be found&nbsp;<a href="http://github.com/krawaller/labyrinth" title="App Github repository" target="_blank">here</a>, if we haven't already said so).</p>


<p>The idea is detailed in the previous posts, but mainly the idea was to have all game logic in an analyser function that calculates all possible states in a level, including the transitions between these states. The actual <strong>player</strong> module (yet to be finished, but a scaffold is up) therefore doesn't need to contain any logic, but simply renders the different states and moves the player between them as he gives his commands. This backward design means...</p>


<ul>
<li>Beautiful <strong>separation of concerns</strong> in the codebase</li>
<li>We can programmatically check the <strong>integrity</strong> of a level, to see if it's actually solvable</li>
<li>Better yet, we can also calculate the <strong>difficulty</strong>, by checking                  
<ul>
<li>the <strong>minimum amount of steps needed</strong> to reach a perfect solution</li>
<li>how many <strong>different branches</strong> there are</li>
<li>frequency of <strong>dead ends</strong> and <strong>deathtraps</strong> </li>
</ul>
</li>
<li>This also means that we can include a <strong>level editor</strong> in the game, and give immediate feedback to the level designer.</li>
<li>With some work it should also be possible to <strong>randomise</strong> levels.</li>
</ul>


<h3>Prototyping</h3>


<p>Ok, enough babbling - here's the game in action (if the iframe doesn't play nice, here's a <a href="http://dl.dropbox.com/u/2287145/labdemo/demo.html" title="labyrinth puzzle game demo" target="_blank">link directly to the demo</a>), using our scaffolded and not-that-lovingly crafted player module. The level isn't that interesting, but serves its purpose as a proof of concept rather nicely.&nbsp;Rule-wise&nbsp;it is very simple; whenever you make a move, all player marbles will fall as far as possible in the chosen direction.&nbsp;</p>


<p><iframe src="http://dl.dropbox.com/u/2287145/labdemo/demo.html" height="300px" width="400px"></iframe></p>


<p>Here's a quick rundown on the different objects in the level:</p>


<ul>
<li>The <strong>yellow marbles</strong> are your player objects, which you move with the arrow keys (or touches if you're on an iphone/ipad). The game keeps going as long as at least one marble is still in play. In this version, nothing at all happens when two marbles overlap, as we couldn't decide if they should block or kill each other.</li>
<li>The goal is to get them all to the <strong>red heart</strong>&nbsp;(the meaning of life is love?).&nbsp;</li>
<li>For a perfect solution you must also pick up all the <strong>valuables</strong>, of which there're two kinds:                 
<ul>
<li>A <strong>small coin</strong>, which is simply picked up as you pass over it</li>
<li>A <strong>large star</strong>, which is picked up but makes the ball stop in the process.&nbsp;</li>
</ul>
</li>
<li>The blue rotating asterisks are <strong>teleports</strong>, which immediately moves the marble to another position (but doesn't interrupt the motion).</li>
<li>The blue square is a <strong>block of ice</strong>, which will gradually break as you collide with it, needing two hits to disappear completely.</li>
<li>We're not quite sure what the <strong>yellow sun symbol</strong> is supposed to represent, but it stops the marble upon entry.</li>
<li>The green triangle is a <strong>locked door</strong>, which is impassable until you've collected...</li>
<li>...the green digit 1, which is a <strong>key</strong>.</li>
<li>The <strong>curved wall</strong> will of course change the direction of the marble accordingly.</li>
<li>The <strong>red arrow</strong> can only be passed in the direction it is pointing, all other paths are blocked. Not sure if it is intiutive for it to block just the opposite direction or all three non-pointing directions, the jury is still out on that.</li>
<li>The <strong>grey square</strong> does nothing except blocking, and is thus pretty uninteresting and useless. We'll most likely not use it further.</li>
</ul>


<h3>The data structure in action</h3>


<p>None of these behaviours are hard-coded into the game logic. Instead they're all defined in the level data object, which is made possible due to the <strong>abstract design</strong> we laid out in the <a href="http://blog.krawaller.se/puzzle-app-step-2-data-structure" title="Puzzle app step 2 - Data structure">previous post</a>. Now, whether or not that was a good idea I'm still not sure, since it made the engine tougher to code. It does however allow for a lot of agility now, as it would be easy to think up a new labyrinth denizen and define its behaviour with pure data, without having to touch the logic code.</p>


<p>The behaviours are in essence a description of what will happen upon the collision of two objects. For example, here's the definition of a collision between a player marble (plr) and a key square:</p>


<script src="http://gist.github.com/459206.js?file=collision-key.js"></script>


<p>Collision with the gate then looks like this:</p>


<script src="http://gist.github.com/459206.js?file=collision-gate.js"></script>


<p>While not rocket science, this system allows us to easily accomodate these new ideas as they come along. The initial idea was to allow the level editor to define new objects here, but probably we'll stick with predefining lots of objects, and limiting the editor to choosing between these.</p>


<h3>The missing pieces of the puzzle</h3>


<p>Obviously, there's still a long way to go before we have anything close to a finished product:</p>


<ul>
<li>Although a little slab of (CSS-only!) paint made a huge difference, we need to <strong>work on the graphics</strong>. We're not at all sure how to approach this, but it will definitely still be CSS3-based as far as possible, meaning a simple yet hopefully elegant design.</li>
<li>We still have to make the <strong>app infrastructure</strong> to contain the game.</li>
<li>The aforementioned <strong>level editor</strong> is probably a rather huge project in and of itself, so that will also take some time.</li>
<li>As is the <strong>randomiser</strong>, if it is at all possible.</li>
<li>We also need some <strong>more ideas regarding in-game objects</strong>. Having multiple player balls is a good one, but we need to freshen it all up some more. Balls travelling against gravity, pushable boxes, the list goes on and on.</li>
</ul>


<p>And since all the excuses we made at the beginning of the post applies for the foreseeable future as well, completion of the labyrinth puzzle game is definitely far off. But, we're slowly but surely getting there!</p>


<p>Also, again: Carcassone is a brilliant game! The application rendition really does the real-life counterpart justice. Buy it, play it, send fan-mail to the developers!&nbsp;</p>


<ul>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opensourcing Golingo]]></title>
    <link href="http://krawaller.github.com/krablog/opensourcing-golingo/"/>
    <updated>2010-05-18T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/opensourcing-golingo</id>
    <content type="html"><![CDATA[<div class="summarytext">Come on in to the Golingo Source Release party! There will be stripping! (open sourcing of code, that is...)</div>


<p>Hey folks! Thanks for sticking with us even when we're not the fastest guys around. I'm <em>rea-he-lly</em> glad to give you this promised behind the scenes post of how Golingo came to be. In case you've been sleeping under a rock (without any means of browsing the intertube), here's a quick recap for you: Golingo is our rudely addictive word game for the iPhone - it was released about a month ago, as one of the first to use the totally revised 1.0 branch of <a href="http://www.appcelerator.com">Appcelerator</a>'s <a href="http://www.appcelerator.com/products/titanium-mobile-application-development/">Titanium Mobile</a>. It is currently the <strong>#1 word game</strong> in the Swedish App Store. Fun stuff!</p>


<p>If you're not at all interested in how to create top paid apps using only Titanium with JavaScript, HTML5 and CSS3, this post not for you. Otherwise, please go ahead!</p>


<p>The code is hosted <strong><a href="https://github.com/krawaller/Golingo">here</a></strong> at our brand spanking new Github account. Hold your horses or check it out straight a way!</p>


<p>[[posterous-content:pmbIdvfjEuDqxpIsAvca]]</p>


<p>But let's start from the beginning. Golingo was born from a thoroughly cosy word game played using Scrabble©-tiles at Café Agape in the tiny Swedish fishing village of <a href="http://www.bovallstrand.com/bovalldir-s/bilder.html">Bovall</a>. We've tried to create an electronic adaption that stayed true to the concept of a blazingly quick, enthralling word juggling game. But how did we do it? Come along!</p>


<p>The first experimental version was created as part of a school project back in 2008. It wasn't much more than a concept, but still hade multiplayer capabilities courtesy of <a href="http://orbited.org/">Orbited</a>. Back then it looked like this:</p>


<p>[[posterous-content:wwAdaDjyktyGdmtmIFdt]]</p>


<p>It fell out of grace in my busy brain while some other idea events bubbled up to my master node. But at the 16th of febraury this year, I coudn't hold it back any more - I had to have a neat project to try Titanium Mobile out, and there it was in the back of my head. I pulled it out and started prototyping straight away. I'm a hands on, iterative programmer, so I quickly got some initial results looking slightly ugly, but still promising.</p>


<p>[[posterous-content:vDfDkEfyDhHeCmjstlac]]</p>


<p>Everything in-game is pure JavaScript, HTML5 and CSS3, which made it possible to develop the game itself in Safari, and dropping it into Titanium only when it was almost done. This was crucial to keep up the speed and sanity during development. Titanium is a great piece of software, but it doesn't have very good debugging capabilities, especially not for webviews. And Safari/Chrome/Webkit Nightly have extremely good debugging tools for both logic (JavaScript) and presentation (HTML and CSS), so why not use them?</p>


<p>I decided to use as many tools as possible to simplify my work, which resulted in the following toolbelt:</p>


<ul>
<li><a href="http://www.appcelerator.com/products/titanium-mobile-application-development/">Titanium Mobile</a></li>
<li> <a href="http://www.w3.org/Style/CSS/current-work">CSS3</a> with <a href="http://www.webkit.org">Webkit</a> <a href="http://webkit.org/blog/324/css-animation-2/">extras</a> </li>
<li><a href="http://www.jquery.com">jQuery 1.4.2</a></li>
<li><a href="http://www.danwebb.net/2008/2/3/how-to-use-low-pro-for-jquery">Low Pro for jQuery</a></li>
<li><a href="http://www.glyphish.com">Glyphish icons</a></li>
<li><a href="http://blog.stevenlevithan.com/archives/parseuri">Uri-parser</a></li>
<li><a href="http://www.dsso.se">Swedish word list</a></li>
<li><a href="http://www.couchdb.org">CouchDB</a></li>
<li><a href="http://www.nordicfactory.com/creative/illustrations/download-free-flag-set-in-png/">Flag icons</a></li>
</ul>


<p>In hindsight, I would probably have replaced jQuery with XUI or tailored code. jQuery is wonderful to use, but it's a bit heavy on mobile devices both to load and during execution. However, it does save time for the developer, so it's not a crystal clear choice. Also, make sure that you keep up with the flow of new exiting tech that might relieve your work - for example both <a href="http://www.css3please.com">css3please.com</a> and <a href="http://www.cssdesk.com">cssdesk.com</a> were release during Golingo's development.</p>


<p><span style="font-size: medium;">The Construction</span></p>


<p>Most of the actual game was made in a few weeks time, but from scratch to published app it took almost six weeks of part time work. A lot of this time was spent banging my head into various walls. Again, Titanium is great, but it's a young framework with all the kinks that follows. There has been quite a few bugs, and the documentation hasn't always been up to date - but this is much better nowadays. What more - since most other developers are as clueless as yourself, It's been hard finding <a href="http://developer.appcelerator.com/apidoc/mobile/latest">good resources</a> and <a href="http://developer.appcelerator.com/questions/created">getting help</a>. I did however get a trial for Appcelerator's Premium Subscription, with 48-hours guaranteed response, and I must say it's really good stuff. The developers themselves answers all your stupid questions and relieves most of the wall banging. If you can afford it, <a href="http://www.appcelerator.com/products/plans-pricing/">go for it</a>!</p>


<p>By releasing the code for Golingo, we hope to relieve some of the headaches surrounding developing packaged HTML5 apps. I do not say that it's not full of faults, because it is, but at least it is a <strong>working example</strong> full of faults. Please don't hesitate to dig through the code to see what is going on. We believe we've solved some common problems that you too will run in to when using Titanium, for example transparently calling native functions from a webview (and vice versa) using callbacks and trickery. Here's a quick recap of that:</p>


<p><span style="font-size: medium;">Connecting Titanium Contexts</span></p>


<p>Your Titanium application is built up of javascript files. There is a main file called app.js which is responsible for bootstrapping your applicaiton. As a matter of fact, you could actually put <strong>all </strong>your code in app.js, but that is only viable for very small apps. Therefore Golingo consists of lots of different files - pretty much one file per window and some util libraries. Whenever you open a webview or a window with a url pointing to a js file, they run their code in a new context - meaning you cannot easily communicate with app.js or any of your other windows or webviews. Or at least, you couldn't had the brilliant minds behind Titanium not given us app-wide events. But since they are brilliant, and they do have given us app-wide events, let's use them to let the different parts of the app communicate.</p>


<p>A common problem with this event-driven way of programming is that you cannot pass functions transparently back and forth between contexts since the event bridge serializes all passed data. Because of this, most people have a hard time figuring out how to call a function in another context and pass the result back to a callback specified in the calling function. We use a pattern looking something like the following, where we hijack the event firing and handling functions to hack in support for transparent callbacks.</p>


<p><script src="https://gist.github.com/403742.js"></script></p>


<p><span style="font-size: medium;">Low Pro like a low pro</span></p>


<p>Another nice library helping the development of Golingo is <a href="http://www.danwebb.net/">Dan Webb</a>'s <a href="http://www.danwebb.net/lowpro">Low Pro</a>. Low Pro is used to make it a breeze to attach beaviour to elements, and does it well. All our letters and boards should behave the same way, so they're all instances of the Letter and Board classes respectively. We ended up using Low Pro in a very basic way, but it does actually have support for inheritance as well as event binding and delegation. Our code should probably be rewritten to more accurately follow Low Pro and it's object oriented ways, but coding in a hurry sometimes results in less than perfect code. We'll fix that as soon as there is peace on earth. Nevertheless, I get a warm feeling from being able to just write:</p>


<p><script src="https://gist.github.com/404905.js"></script></p>


<p><span style="font-size: medium;">Sexifying</span></p>


<p>In Titanium, you use JavaScript to create and layout native elements and windows. This is incredibly powerful out of the box, but my feeling is that Appcelerator care more about laying the groundwork and creating the low level functions than making a sexy API. This is totally fine by me. I love that their focus means a quickly maturing API. But since I'm also all about the sexy programming, I've taken on the sexifying part. In Golingo, we started this journey by abstracting the menu creation somewhat. However, these we're only the first baby steps.</p>


<p>After finishing Golingo, I've been working on a few different Titanium based projects. And the more I do work with Titanium, the more I like what you can achieve, but also the less I enjoy how Titanium does it out of the box. It's way too verbose and clumsy for my liking. Also, there is no good way of separating the layouting from the element creation. Since I love HTML and CSS, I decided to do apply them to Titanium. The result is not present in the current Golingo release, but I'll talk about it in an upcoming blogpost. Here is a sneak peek of an exampe:</p>


<p><script src="https://gist.github.com/404953.js"></script></p>


<p>Even though the HTML parsing might mean too much of a overhead for big files, a better layouting mechanism is needed, but I'll elaborate on that subject in an upcoming post.</p>


<p><span style="font-size: medium;">Get dirty</span></p>


<p><span style="font-size: medium;">[[posterous-content:xoiclCBHymycFdExjuuv]]</span>I had planned to get the code in super trim and add an interactive playing guide as well as multiplayer capabilities and other goodies before releasing the source, but I realised there's not really any need to wait. If you're brave enough to wade through sometimes somewhat semi-stupid code, you should be free to do so, and not wait for our utopian dream. Maybe you could even give us a helping hand at fixing all these new fancy features. For example, it shouldn't be too hard getting most of the game to run on Android. Palm should also be within reach if you break out of Titanium or write a shim for it! I dare you!</p>


<p>I repeat: the code is hosted <strong><a href="https://github.com/krawaller/Golingo">here</a></strong> at our brand  spanking new Github account. Isn't it time for you to dive in?</p>


<p>[[posterous-content:bomImsqFuqIIzgaGqAkD]]</p>


<p>We are very curious what you'll do with the code and all. We'll continue to develop Golingo as well as other cool apps, so stay tuned as usual. Also, we promise to catch up on the HTML5 vs Objective-C series, where we'll try to match the basic functionality of popular apps in a days worth of programming. Please feel free to leave tips for what apps you'd like to see us take on in the comments!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 2 - Data structure]]></title>
    <link href="http://krawaller.github.com/krablog/puzzle-app-step-2-data-structure/"/>
    <updated>2010-05-12T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/puzzle-app-step-2-data-structure</id>
    <content type="html"><![CDATA[<div class="summarytext">Follow along as we're blogging the development of our new iPhone puzzler! In this post we define the data structures that will control the game.</div>


<p>We've already <a href="http://blog.krawaller.se/the-intestines-of-a-good-puzzle-game">laid down the foundation</a> of the project, defining the basic idea: ripping off the age-old idea of a labyrinth where the player object can travel in all cardinal directions, but always as far as possible. The why behind the adoption of this seemingly bland idea can be found in the previous post, now we're going to get started on the how!</p>


<p>In this post we're going to define the <strong>data structures</strong> involved. Let's start with deciding what a <strong>labyrinth data object</strong> should look like! To do that, we have to jot down our ideas of what a labyrinth can contain:</p>


<ul>
<li>Of course, it has to contain some <strong>walls</strong>. </li>
<li>As the screen real estate on the iPhone is rather limited, we might do well to also allow the <strong>borders </strong>between the squares to block passage.</li>
<li>We might also want <strong>special squares</strong> which somehow affect the player, for example teleporting him to a different square.</li>
<li>A neat addition to this otherwise rather stale game concept might be to have <strong>other entities</strong> in the labyrinth apart from the player object. These can be moved along with the player (and kill him upon contact), or pushed along by the player, etc.</li>
<li>One clone that I played had the concept of <strong>bonus objects</strong>, and you wouldn't get a perfect score when you reached the goal if you hadn't also collected all the loot on the level.</li>
<li>We might also want things to happen in certain <strong>conditions</strong>, perhaps allowing passage through a wall if the player has collected the key, or pressed a button no more than three moves ago, etc.</li>
</ul>


<p>These wishes can be abstracted into the following concepts:</p>


<ul>
<li>Walls, borders and entities are all of a certain <strong>type</strong>. A type has a look (class), and a flag to say if it moves with gravity or not (if it is an entity).</li>
<li>We need to have <strong>effects</strong>, affecting entities / walls / borders (changing their type, or position if an entity) or the game itself (flags, counters)</li>
<li>Then we can define what effects should happen in a <strong>collision </strong>between two types.</li>
<li>In order to spice things up we might also want to allow things to happen <strong>conditionally</strong>.</li>
</ul>


<p>Using these concepts we can build up an object defining a level with a somewhat advanced functionality:</p>


<script src="http://gist.github.com/386993.js?file=datastructure.js"></script>


<p>With this structure, we should be able to define levels with a wide range of behaviours. Probably we'd do well to hardcode some shortcuts for the most common usecases, but this should set us off on a good start.</p>


<p>Now let's consider what's required to <strong>save the state</strong> of a level. What can change from the definition object?</p>


<ul>
<li>We need to track the <strong>position of all entities</strong>, that will fall around the labyrinth as the player makes his moves.</li>
<li>The entities might also change <strong>type</strong>, so we need to track that as well.</li>
<li>If a <strong>wall or border</strong> has changed, we have to store that.</li>
<li>The <strong>flags and variables</strong> of the game must be kept. </li>
<li>Finally we also need to save the <strong>number of moves</strong>.</li>
</ul>


<p>So a save object should look something like this:</p>


<script src="http://gist.github.com/386993.js?file=gamestate.js"></script>


<p>In the first post, we mentioned the idea of a <strong>level analyzer </strong>module. It should take a level object, and then use game logic to calculate all possible states, and the transitions between them. The returned analysis object would have keys made up by serialized states. The corresponding values is an object with the states you can reach from that particular state, and what graphical transitions should be shown for this move. This analysis object will then be used for the <strong>gameplayer </strong>module, which will simply transit between the states, performing the animations. </p>


<p>Here's a blueprint for such an analysis object: </p>


<script src="http://gist.github.com/386993.js?file=analysis.js"></script>


<p>The <strong>level analyzer</strong> module building that object will look something like this:</p>


<script src="http://gist.github.com/386993.js?file=analyzer.js"></script>


<p>And here's a sketch of the <strong>gameplayer</strong> module: </p>


<script src="http://gist.github.com/386993.js?file=gameplayer.js"></script>


<p>So the bulk of the project consists of creating these two modules! I called dibs on the analyzer, so I'll get started on that right away. Little brother, get cracking on some CSS3 magic for the gameplayer module! First one to report back here with a post about the module wins remote control control for a week!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Krawaller goes Github]]></title>
    <link href="http://krawaller.github.com/krablog/krawaller-goes-github/"/>
    <updated>2010-05-05T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/krawaller-goes-github</id>
    <content type="html"><![CDATA[<div class="summarytext">Finally set up our Github-account, where we'll be releasing lots of front-end &amp; smartphone-related projects. Read up here on what's already there!</div>


<p>Hi folks!</p>


<p>We just wanted to let you know that we've set up <a href="http://github.com/krawaller">a fancy new Github accout here</a>, to make way for our upcoming <a href="http://www.golingoapp.com">Golingo</a> source release.</p>


<p>However, we'd feel a bit ashamed if it would have to stay so very reverberatingly empty until then, so we had to throw together a few projects to make it more cosy and homelike. Oh my, the priorities of a creative programmer ;)</p>


<p><span style="font-size: large;">PubSubHotTub</span></p>


<p>First out is <a href="http://github.com/krawaller/PubSubHotTub">PubSubHotTub</a> - a lightweight pubsub broker with a lame name. However, it does have more than just a silly name - namely support for wildcard publishing <strong>and</strong> wildcard subscriptions as well as currying. It's not very well tested, apart from the test suite that ships with it, but we intend to use it in some of our upcoming projects. So we hope it will grow up to be a pretty and powerful, but still very light, tool. Here's how it looks:</p>


<p><script src="https://gist.github.com/391092.js"></script></p>


<p>That's nice and easy, but still very cunning, no?</p>


<p><span style="font-size: large;">CSSMol</span></p>


<p>Second out is <a href="http://github.com/krawaller/CSSMol">CSSMol</a> - a port of the beautiful <a href="http://alteredqualia.com/canvasmol/">CanvasMol</a> to use CSS 3D Transforms instead of canvas. </p>


<p>Why would anyone do this, you ask? Well, we needed an excuse to play with the cutting edge CSS 3D  Transforms, so why not? Mind the cutting edge-ness though - this is so new that probably only  Mobile Safari, Safari 4 and Webkit Nightly supports it. But why do it then? Well, because Mobile Safari has hardware accelerated  CSS Transforms - meaning we can get decent performance even on a small  weak device as the iPhone.</p>


<p>Check out <a href="http://79.99.1.153/cssmol/">the demo</a> on your iPhone / iPad and also add it to your homescreen, or check it out in Safari 4 or Webkit Nightly on your desktop (might only work on Mac/Linux). Sweet, hey? If you have an iPad around please let us know how it works. We're drooling all over the place after an iPad, but haven't bought one... yet :)</p>


<p><a href="http://79.99.1.153/cssmol/">[[posterous-content:trnClyraErjuewbtavBG]]</a></p>


<p>We might do a more detailed write up of CSS 3D Transforms and such if you're interested! Please don't hesitate to share what you would like to see from us. Very few things are impossible :)</p>


<p>Also, please feel free to contact us for contract work.</p>


<p>KTHXBYE</p>

]]></content>
  </entry>
  
</feed>
