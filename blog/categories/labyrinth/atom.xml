<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: labyrinth | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/blog/categories/labyrinth/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-02-24T17:02:11+01:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 3 - revving up the engine]]></title>
    <link href="http://krawaller.github.com/krablog/puzzle-app-step-3-revving-up-the-engine/"/>
    <updated>2010-07-03T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/puzzle-app-step-3-revving-up-the-engine</id>
    <content type="html"><![CDATA[<div class="summarytext">Having finished the level analyser, work starts on actually finishing the game. Read up on the process and try out the playable prototype here!</div>


<h3>Excusing the sound of silence</h3>


<p>And suddenly a whole month went by! But we haven't just been idling around playing <a href="http://carcassonneapp.com/" title="Carcassonne app official homepage">Carcassone</a> all day (at least not just) - this past month has seen several wheels being set in motion;</p>


<ul>
<li>An <strong>iPad/iOS4-friendly version of <a href="http://blog.krawaller.se/tag/golingo" title="Posts on Golingo">Golingo</a></strong> is waiting in the wings! Come on, little brother, type faster!</li>
<li>We're awaiting Apple's approval for our next AppStore application [edit: app is now live, read announcement <a href="http://blog.krawaller.se/systemet">here</a>] - an <strong>inofficial app for <a href="http://www.systembolaget.se/hem/" title="Systembolaget">Systembolaget</a></strong> (where swedes go buy their alcohol, since we're not trusted to do so without government supervision). There <a href="http://itunes.apple.com/se/app/hittabolaget/id328888218?mt=8" title="HittaBolaget appstore link">already is one</a> on the market, but our not-so-objective opinion is that we blow that out of the water since&nbsp;Titanium &gt; ObjectiveC (and also&nbsp;good design &gt; bad design).</li>
<li>Communications are underway with the manufacturers behind our very favourite <strong>boardgame</strong> regarding taking it to the iPad/iPhone (inspired by the brilliant appification of Carcassone, which we're absolutely not playing all day all the time). Hopefully we can spill some more beans on that in the somewhat near future!</li>
<li>Continuing the trend of placing ourselves at risk of severe starstruckness, we've also begun development of the <strong>official app for our favourite metal band</strong>. Huge amounts of fun, and having an excuse to communicate with these long-time heroes of ours is simply awesome. Further beanspilling to follow here too [edit: check the related posts <a href="http://blog.krawaller.se/tag/tristania">here</a>] .&nbsp;</li>
<li>Our biggest pastime, however, has been <strong>involvement with a very promising startup</strong>, spearheaded by a driven entrepeneur duo with a great idea and the know-how to make it happen. Seeing these guys in action has been a privilige; we might have some badass technical knowhow, but direction, ambition, organisation, efficiency and all those adjectives - not so much. So being able to piggyback on them has been a very educative ride. And, you guessed it; more beans later.&nbsp;</li>
</ul>


<p>All this action invariably meant less playtime for our less serious (read: turnover-potent) inhouse project, which demoted our puzzle game to the back burner. But before <span style="text-decoration: line-through;">Carcassone took us over completely</span> things got too busy, we did managed to make quite a bit of progress, which is what we wanted to share in this post!</p>


<h3>Analyse this</h3>


<p>First and foremost, the<strong> analyser module is finished</strong>. It turned out to be an almost AliceInWonderlandesque journey into some rather esotheric recursive gymnastics, so if you're into that sort of thing, do dive into the code and check it out (the code repository can be found&nbsp;<a href="http://github.com/krawaller/labyrinth" title="App Github repository" target="_blank">here</a>, if we haven't already said so).</p>


<p>The idea is detailed in the previous posts, but mainly the idea was to have all game logic in an analyser function that calculates all possible states in a level, including the transitions between these states. The actual <strong>player</strong> module (yet to be finished, but a scaffold is up) therefore doesn't need to contain any logic, but simply renders the different states and moves the player between them as he gives his commands. This backward design means...</p>


<ul>
<li>Beautiful <strong>separation of concerns</strong> in the codebase</li>
<li>We can programmatically check the <strong>integrity</strong> of a level, to see if it's actually solvable</li>
<li>Better yet, we can also calculate the <strong>difficulty</strong>, by checking                  
<ul>
<li>the <strong>minimum amount of steps needed</strong> to reach a perfect solution</li>
<li>how many <strong>different branches</strong> there are</li>
<li>frequency of <strong>dead ends</strong> and <strong>deathtraps</strong> </li>
</ul>
</li>
<li>This also means that we can include a <strong>level editor</strong> in the game, and give immediate feedback to the level designer.</li>
<li>With some work it should also be possible to <strong>randomise</strong> levels.</li>
</ul>


<h3>Prototyping</h3>


<p>Ok, enough babbling - here's the game in action (if the iframe doesn't play nice, here's a <a href="http://dl.dropbox.com/u/2287145/labdemo/demo.html" title="labyrinth puzzle game demo" target="_blank">link directly to the demo</a>), using our scaffolded and not-that-lovingly crafted player module. The level isn't that interesting, but serves its purpose as a proof of concept rather nicely.&nbsp;Rule-wise&nbsp;it is very simple; whenever you make a move, all player marbles will fall as far as possible in the chosen direction.&nbsp;</p>


<p><iframe src="http://dl.dropbox.com/u/2287145/labdemo/demo.html" height="300px" width="400px"></iframe></p>


<p>Here's a quick rundown on the different objects in the level:</p>


<ul>
<li>The <strong>yellow marbles</strong> are your player objects, which you move with the arrow keys (or touches if you're on an iphone/ipad). The game keeps going as long as at least one marble is still in play. In this version, nothing at all happens when two marbles overlap, as we couldn't decide if they should block or kill each other.</li>
<li>The goal is to get them all to the <strong>red heart</strong>&nbsp;(the meaning of life is love?).&nbsp;</li>
<li>For a perfect solution you must also pick up all the <strong>valuables</strong>, of which there're two kinds:                 
<ul>
<li>A <strong>small coin</strong>, which is simply picked up as you pass over it</li>
<li>A <strong>large star</strong>, which is picked up but makes the ball stop in the process.&nbsp;</li>
</ul>
</li>
<li>The blue rotating asterisks are <strong>teleports</strong>, which immediately moves the marble to another position (but doesn't interrupt the motion).</li>
<li>The blue square is a <strong>block of ice</strong>, which will gradually break as you collide with it, needing two hits to disappear completely.</li>
<li>We're not quite sure what the <strong>yellow sun symbol</strong> is supposed to represent, but it stops the marble upon entry.</li>
<li>The green triangle is a <strong>locked door</strong>, which is impassable until you've collected...</li>
<li>...the green digit 1, which is a <strong>key</strong>.</li>
<li>The <strong>curved wall</strong> will of course change the direction of the marble accordingly.</li>
<li>The <strong>red arrow</strong> can only be passed in the direction it is pointing, all other paths are blocked. Not sure if it is intiutive for it to block just the opposite direction or all three non-pointing directions, the jury is still out on that.</li>
<li>The <strong>grey square</strong> does nothing except blocking, and is thus pretty uninteresting and useless. We'll most likely not use it further.</li>
</ul>


<h3>The data structure in action</h3>


<p>None of these behaviours are hard-coded into the game logic. Instead they're all defined in the level data object, which is made possible due to the <strong>abstract design</strong> we laid out in the <a href="http://blog.krawaller.se/puzzle-app-step-2-data-structure" title="Puzzle app step 2 - Data structure">previous post</a>. Now, whether or not that was a good idea I'm still not sure, since it made the engine tougher to code. It does however allow for a lot of agility now, as it would be easy to think up a new labyrinth denizen and define its behaviour with pure data, without having to touch the logic code.</p>


<p>The behaviours are in essence a description of what will happen upon the collision of two objects. For example, here's the definition of a collision between a player marble (plr) and a key square:</p>


<script src="http://gist.github.com/459206.js?file=collision-key.js"></script>


<p>Collision with the gate then looks like this:</p>


<script src="http://gist.github.com/459206.js?file=collision-gate.js"></script>


<p>While not rocket science, this system allows us to easily accomodate these new ideas as they come along. The initial idea was to allow the level editor to define new objects here, but probably we'll stick with predefining lots of objects, and limiting the editor to choosing between these.</p>


<h3>The missing pieces of the puzzle</h3>


<p>Obviously, there's still a long way to go before we have anything close to a finished product:</p>


<ul>
<li>Although a little slab of (CSS-only!) paint made a huge difference, we need to <strong>work on the graphics</strong>. We're not at all sure how to approach this, but it will definitely still be CSS3-based as far as possible, meaning a simple yet hopefully elegant design.</li>
<li>We still have to make the <strong>app infrastructure</strong> to contain the game.</li>
<li>The aforementioned <strong>level editor</strong> is probably a rather huge project in and of itself, so that will also take some time.</li>
<li>As is the <strong>randomiser</strong>, if it is at all possible.</li>
<li>We also need some <strong>more ideas regarding in-game objects</strong>. Having multiple player balls is a good one, but we need to freshen it all up some more. Balls travelling against gravity, pushable boxes, the list goes on and on.</li>
</ul>


<p>And since all the excuses we made at the beginning of the post applies for the foreseeable future as well, completion of the labyrinth puzzle game is definitely far off. But, we're slowly but surely getting there!</p>


<p>Also, again: Carcassone is a brilliant game! The application rendition really does the real-life counterpart justice. Buy it, play it, send fan-mail to the developers!&nbsp;</p>


<ul>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 2 - Data structure]]></title>
    <link href="http://krawaller.github.com/krablog/puzzle-app-step-2-data-structure/"/>
    <updated>2010-05-12T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/puzzle-app-step-2-data-structure</id>
    <content type="html"><![CDATA[<div class="summarytext">Follow along as we're blogging the development of our new iPhone puzzler! In this post we define the data structures that will control the game.</div>


<p>We've already <a href="http://blog.krawaller.se/the-intestines-of-a-good-puzzle-game">laid down the foundation</a> of the project, defining the basic idea: ripping off the age-old idea of a labyrinth where the player object can travel in all cardinal directions, but always as far as possible. The why behind the adoption of this seemingly bland idea can be found in the previous post, now we're going to get started on the how!</p>


<p>In this post we're going to define the <strong>data structures</strong> involved. Let's start with deciding what a <strong>labyrinth data object</strong> should look like! To do that, we have to jot down our ideas of what a labyrinth can contain:</p>


<ul>
<li>Of course, it has to contain some <strong>walls</strong>. </li>
<li>As the screen real estate on the iPhone is rather limited, we might do well to also allow the <strong>borders </strong>between the squares to block passage.</li>
<li>We might also want <strong>special squares</strong> which somehow affect the player, for example teleporting him to a different square.</li>
<li>A neat addition to this otherwise rather stale game concept might be to have <strong>other entities</strong> in the labyrinth apart from the player object. These can be moved along with the player (and kill him upon contact), or pushed along by the player, etc.</li>
<li>One clone that I played had the concept of <strong>bonus objects</strong>, and you wouldn't get a perfect score when you reached the goal if you hadn't also collected all the loot on the level.</li>
<li>We might also want things to happen in certain <strong>conditions</strong>, perhaps allowing passage through a wall if the player has collected the key, or pressed a button no more than three moves ago, etc.</li>
</ul>


<p>These wishes can be abstracted into the following concepts:</p>


<ul>
<li>Walls, borders and entities are all of a certain <strong>type</strong>. A type has a look (class), and a flag to say if it moves with gravity or not (if it is an entity).</li>
<li>We need to have <strong>effects</strong>, affecting entities / walls / borders (changing their type, or position if an entity) or the game itself (flags, counters)</li>
<li>Then we can define what effects should happen in a <strong>collision </strong>between two types.</li>
<li>In order to spice things up we might also want to allow things to happen <strong>conditionally</strong>.</li>
</ul>


<p>Using these concepts we can build up an object defining a level with a somewhat advanced functionality:</p>


<script src="http://gist.github.com/386993.js?file=datastructure.js"></script>


<p>With this structure, we should be able to define levels with a wide range of behaviours. Probably we'd do well to hardcode some shortcuts for the most common usecases, but this should set us off on a good start.</p>


<p>Now let's consider what's required to <strong>save the state</strong> of a level. What can change from the definition object?</p>


<ul>
<li>We need to track the <strong>position of all entities</strong>, that will fall around the labyrinth as the player makes his moves.</li>
<li>The entities might also change <strong>type</strong>, so we need to track that as well.</li>
<li>If a <strong>wall or border</strong> has changed, we have to store that.</li>
<li>The <strong>flags and variables</strong> of the game must be kept. </li>
<li>Finally we also need to save the <strong>number of moves</strong>.</li>
</ul>


<p>So a save object should look something like this:</p>


<script src="http://gist.github.com/386993.js?file=gamestate.js"></script>


<p>In the first post, we mentioned the idea of a <strong>level analyzer </strong>module. It should take a level object, and then use game logic to calculate all possible states, and the transitions between them. The returned analysis object would have keys made up by serialized states. The corresponding values is an object with the states you can reach from that particular state, and what graphical transitions should be shown for this move. This analysis object will then be used for the <strong>gameplayer </strong>module, which will simply transit between the states, performing the animations. </p>


<p>Here's a blueprint for such an analysis object: </p>


<script src="http://gist.github.com/386993.js?file=analysis.js"></script>


<p>The <strong>level analyzer</strong> module building that object will look something like this:</p>


<script src="http://gist.github.com/386993.js?file=analyzer.js"></script>


<p>And here's a sketch of the <strong>gameplayer</strong> module: </p>


<script src="http://gist.github.com/386993.js?file=gameplayer.js"></script>


<p>So the bulk of the project consists of creating these two modules! I called dibs on the analyzer, so I'll get started on that right away. Little brother, get cracking on some CSS3 magic for the gameplayer module! First one to report back here with a post about the module wins remote control control for a week!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puzzle app step 1 - The intestines of a good puzzle game]]></title>
    <link href="http://krawaller.github.com/krablog/the-intestines-of-a-good-puzzle-game/"/>
    <updated>2010-04-29T00:00:00+02:00</updated>
    <id>http://krawaller.github.com/krablog/the-intestines-of-a-good-puzzle-game</id>
    <content type="html"><![CDATA[<div class="summarytext">Philosophing our way to what our next application should be!</div>


<p>Having finally got <a href="http://blog.krawaller.se/krawaller-proudly-presents-golingo">Golingo out the door</a> and into the app store, we’re in the process of dreaming forth our next project. While Golingo will keep us occupied for some time to come;</p>


<ul>
<li>As my brother promised, he’s going to <strong>detail the creation</strong> of it in a forthcoming post, highlighting the use of web technologies and the benefits of the Titanium Framework. Start typing, Jacob! [edit: read that post <a href="blog.krawaller.se/opensourcing-golingo">here</a>]</li>
<li>Community feedback has given more than enough ideas for an <strong>update</strong>, so Jacob is now working on a new version containing..            
<ul style="margin-left: 3em;">
<li>more languages (initial release has English and Swedish)</li>
<li>more game modes</li>
<li>wifi multiplayer (to complement the split-screen multiplayer already in place)</li>
</ul>
</li>
<li>We’re also considering getting an <strong>Android version</strong> out, which will hopefully result in a blog post on what that transition will entail. The fact that web apps are (mostly) platform independent is one of the main arguments against using Objective C, and this conversion will put that to the test. Will it suffice to simply throw a switch in Titanium and search&amp;replace some proprietary CSS, or is a more deep-going refactoring needed?</li>
<li>Of course we also want to keep <strong>pushing Golingo sales</strong>, trying our hand at the very strange field of internet marketing. We are completely oblivious as to what makes success there, so it’s a journey of discovery (advice much appreciated!). Golingo did however recently reach the 1000 units sold mark, meaning an wage of $2 per development hour! We just need to release 49999 more apps to get our Mediterranean beach house!</li>
</ul>


<p>But, being developers we need to develop, so in parallel to the Golingo caretaking we’ve also started <strong>hunting down the next idea</strong>. Now, like all of you we of course have several dream projects that we’re itching to work on, projects of life-fulfilling promise but of equal complexity. Time, however, is in short supply – Jacob is in the process of securing a contract to create a travel planner application for a major Swedish infrastructure company, and I spend 80% of my time teaching mathematics &amp; programming to the inmates of <a href="http://www.kriminalvarden.se/sv/English/">society’s penalty box</a>. I’ve finished the <a href="http://blog.krawaller.se/tag/ria_university_course">Advanced JavaScript course</a> for <a href="http://lnu.se/?l=en">Linnaeus University</a>, but still, 1 free day a week (minus household chores) doesn’t amount to much. So with the <a href="http://blog.krawaller.se/web-design-lessons-from-an-angry-carpenter">lessons from the angry carpenter</a> fresh in memory, I realised we need to keep things simple and our heads on our shoulders.</p>


<p>Because of that, and because it’s also in line with a common perversion of ours, we decided to create some kind of <strong style="">puzzle game</strong>. They are by nature rather confined, and might therefore be doable within our limited time. I earned my programming badge in the dungeons of a beautiful <a href="http://en.wikipedia.org/wiki/Multi_User_Dungeon">MUD</a> called <a href="http://midnightsun2.org:3328/">Midnight Sun</a>, where one of my favourite pastimes was making puzzles for the heroes to solve, so as to put their wit to the test and not just their character’s stats. I’m hoping I can draw on that experience to shorten development time even further.</p>


<p>Now, being a mathematician, I started thinking – what actually constitutes a good puzzler? Are there some mathematical traits that we need to pursue or avoid? There are some obvious answers:</p>


<ul>
<li> <span>First off, the idea needs to be both <strong>simple and clearly defined</strong>. The rules of our universe must be few and unambiguous. Take <a href="http://www.subwayshuffle.com/">Subway Shuffle</a>, an early iPhone favourite of mine. To play it, you only need to know that...</span> 
<ul style="margin-left: 3em;">
<li>You can move all cars, but only along tracks with the same colour</li>
<li>Only one car per station at a time</li>
<li>The goal is to get your red car to the big red station.</li>
</ul>
</li>
<li>You need to have a <strong>rich choice tree</strong>. Here Subway Shuffle becomes an anti-example – at any given point you only have very few options available, and more often than not the correct one is also the only one, if you eliminate backtracking.</li>
<li>There also needs to be some <strong>possibility of lookahead</strong>. If the game is completely opaque and you’re not      sure how you’re doing, it’s hard to have fun. <a href="http://nonverbal.ch/colorbind.html">Colorbind</a> is an excellent example of this, where it’s always possible to deduct how close you are to your goal, and whether or not you can get there from the current point. Side point: Colorbind is also really beautiful, which definitely doesn’t hurt sales nor gaming experience.</li>
<li>However, the <strong>lookahead shouldn't be too allowing</strong>. Case in point: <a href="http://www.mobigame.net/">Cross      Fingers</a>. After having stared at the board for a while and having realised how to solve a level, the actual solving is just a tedious walk through the motions.</li>
</ul>


<table class="pictable" border="0" style="margin-left: 15px; text-align: center;">

<tr>
<td valign="bottom"><img title="subway shuffle" src="http://dl.dropbox.com/u/2287145/livepics/subwayshuffle.jpg" alt="subway shuffle" /></td>
<td valign="bottom"><img title="colorbind" src="http://dl.dropbox.com/u/2287145/livepics/colorbind.jpg" alt="colorbind" /></td>
<td><img title="cross fingers" src="http://dl.dropbox.com/u/2287145/livepics/crossfingers.jpg" alt="cross fingers" /></td>
</tr>
<tr>
<td><span style="font-style: italic; font-size: 0.9em;">Subway Shuffle</span></td>
<td><span style="font-style: italic; font-size: 0.9em;">Colorbind</span></td>
<td><span style="font-style: italic; font-size: 0.9em;">Cross Fingers</span></td>
</tr>

</table>


<p>Having reread the above list umpteen times without managing to come up with a novel idea of our own, we eventually decided to do like all successful developers - <strong>steal one</strong>! There are innumerable basic puzzle concepts that have been reincarnated more times than Buddha, and can therefore be considered part of the public domain.</p>


<p>One such concept quickly rose to the top of our list of potential thieving targets: <strong>Labyrinth</strong>. At least, that's what the first reincarnation I encountered was called, which I played in the attic on my father's Macintosh more than 20 years ago. You've all experienced it in one form or other, I'm sure. Below is a screenshot from <a href="http://www.mikegagnon.com/roadblocks/rb1.html">Roadblocks</a>, a more recent (but less beautiful) flash incarnation:</p>


<p style="margin-left: 15px;"><img title="Roadblocks" src="http://dl.dropbox.com/u/2287145/livepics/roadblocks.JPG" alt="Roadblocks" /></p>


<p>The idea is very simple: You have to reach the goal. You're able to travel in any cardinal direction, but cannot stop mid-flight. In a way, you could say you're controlling gravity - whenever you press an arrow key (or tilt the iPhone, perhaps?) in a certain direction, the player object will travel as far as possible in that direction.</p>


<p>And, that's pretty much it! I think the simplicity explains the longevity of this seemingly bland concept. The labyrinth will always be much smaller than it seems, since only a few positions are actually reachable. To make things more interesting and to increase the branches on the choice tree, various spices are usually added: teleports, breaking blocks, etc. So while the basic concept is simple enough to implement, there seems to be ample opportinuty to breathe some fresh air into it all by thinking up new ways to spice things up!</p>


<p>Having finally decided on what to aim for, I sat down to make a sketch of the project. First I jotted down some basic thoughts &amp; premises:</p>


<ul>
<li>We will of course follow the path Golingo cleared, and program this game using <strong>only web technologies</strong>. Probably we'll pack it up in Titanium, but we don't need to make that decision until way further down the path.</li>
<li>To allow for lots of exotic spices, I want to make an <strong>abstract, flexible game engine</strong> that can easily incorporate the new ideas which will inevitably pop up along the line (movable blocks! enemies! multiple player objects! levers! inventory! delayed effects! etc etc ad infinitum).</li>
<li> <a href="http://www.mobygames.com/developer/sheet/view/developerId,4217/">Will Wright</a> has many claims to fame, but for me the most important lesson he taught is that of the humongous size of peoples' pride. How come <a href="http://thesims.ea.com/">The Sims</a>, a game by definition utterly boring (your characters use the toilet, for Christ's sake), has had such a remarkable success? It is based on user generated content, that's why! Incorporating a <strong>level editor</strong> into our game would be a neat way to capitalise on that, as well as making it easier for us to create the levels to be packaged with the game.</li>
<li>Since we're short on both time and graphics skill, we'll use our otherwise unhealthy fascination of new web tech to give the game a simple but hopefully <strong>stylish look using mostly (only?) CSS</strong>.</li>
<li>I also want the game to <strong>feel at home on the iPhone</strong>. Colorbind is again a prime example, using the touchscreen and gimmicks (shake the phone to clear what you've done) to great effect. Contrast this to <a href="http://itunes.apple.com/us/app/puzzlequest-chapter-1-and-2/id300573601?mt=8" title="Puzzle quest">Puzzle Quest</a>, which was ported straight to the platform without any regards as to what makes it special, leaving the game feeling rather alien to play.</li>
</ul>


<p>A further brainstorming session in front of this list gave birth to the idea of the <strong>Analyzer</strong>. If we are to allow players to make levels of their own, they need to have some tools to make sure that their level is actually solvable. So why not put all game logic into this tool? I'm going to make a module that analyzes a given level, and spits out a data object containing all possible board positions, and the connections between them. That allows us not just to check the integrity of a level, but also to sort them difficultywise programmatically. </p>


<p>The <strong>gaming module</strong> will therefore not contain any game logic at all, but just perform the animations when transitioning from one state to another, and keep track of the current state. This should allow for a very neat separation of concerns in the codebase.</p>


<p>It also makes the whole project split neatly down the middle, meaning me and my brother can wrestle with one half each! I already have most of the Analyzer code written down in my head (I have an editor in my brain, but unfortunately it can't yet run any code), so I'm going to call dibs on that. Which will suit Jacob fine, as he's quite skilled in the CSS graphics department anyway - he made Golingo using almost no actual pictures, save the wooden background. </p>


<p>So that's where we're at now! I'm in the process of writing some specs of the data objects to be passed around, but when that's done we can both get to work individually, without depending on the progress of one another. Time (and a <a href="http://blog.krawaller.se/puzzle-app-step-2-data-structure">follow-up post</a>) will tell how it all turns out!</p>

]]></content>
  </entry>
  
</feed>
