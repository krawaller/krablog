<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-02-24T07:09:04+01:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Backbone Objects]]></title>
    <link href="http://krawaller.github.com/krablog/blog/2013/02/23/testing-backbone-objects/"/>
    <updated>2013-02-23T17:21:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/blog/2013/02/23/testing-backbone-objects</id>
    <content type="html"><![CDATA[<h3>Troll bait (or "How not to do it")</h3>

<p>Here's a blanket statement to flame against:</p>

<blockquote><p><em>Instantiating Backbone views/models/collections in order to test them is an <strong>antipattern</strong>!</em></p></blockquote>

<p>Why? When we try to test an instance, we're faced with two main problems:</p>

<ul>
<li> It will likely <strong>require lots of setup</strong>, as we have to call the constructor with some reasonable data.</li>
<li> When testing some aspect of the instance, it is <strong>hard to make the test independent</strong> of other functionality aspects.</li>
</ul>


<h3>How to do it</h3>

<p>So, then, how should it be done? Here's the approach I use.</p>

<ol>
<li>First we must of course <strong>analyse what the method actually does</strong> (or is supposed to do, if we're doing true BDD and writing the tests first).</li>
<li>Start the test by <strong>storing the method</strong> to test through <code>var method = MyConstructor.prototype.methodToTest</code>.</li>
<li>If the method touches <code>this</code> (which is almost always the case) I <strong>create a custom context</strong> object containing stubs, spies and dummy data as needed.</li>
<li>I create eventual <strong>parameter</strong> data.</li>
<li>I'll then <strong>call the method on the custom context</strong>: <code>var result = method.call(context, ...args...);</code>.</li>
<li>Following that I can <strong>test the result</strong>...</li>
<li>...check that the <strong>context was manipulated</strong> in the expected way...</li>
<li>...and also if my <strong>spies where called in the correct way</strong>.</li>
</ol>


<h3>A small case study</h3>

<p>As an example, consider the (adapted) following view that a student of mine had in a recent project:</p>

<p>``` javascript Backbone View
var AddRecipeView = Backbone.View.extend({</p>

<p>  initialize: function(opts) {</p>

<pre><code>this.model = new DishModel();
this.render()
  // Listen to model validation errors
  .listenTo(this.model, 'invalid', this.renderErrors)
  .listenTo(this.model, 'change', this.checkErrorField)
</code></pre>

<p>  },</p>

<p>  // ...rest of functionality edited out...
});
```</p>

<p>Using the test philosophy outlined above, how would we test the <code>initialize</code> function? Here's one suggestion, using <a href="[http://pivotal.github.com/jasmine/]">Jasmine</a>, <a href="[http://sinonjs.org/]">Sinon</a> and <a href="[https://github.com/froots/jasmine-sinon]">Jasmine-sinon</a> custom matchers.</p>

<ol>
<li><strong>Analysis:</strong> First we analyse what the method is supposed to do:</li>
</ol>


<pre><code>1.    It adds a Dishmodel instance to the context
2.    It calls the render function
3.    It sets two event listeners
</code></pre>

<ol>
<li><strong>Access the method:</strong> We start the testcode by capturing the method to test from the constructor prototype: <code>var initialize = AddRecipeView.prototype.initialize</code></li>
<li><strong>Context:</strong> We need to create a context with stubs for <code>listenTo</code> and <code>render</code>. As the method uses a chaining syntax, we must also have these spies return our custom context. Finally we need to have some dummy data in <code>.renderErrors</code> and <code>.checkErrorField</code>, in order to be able to test if those were correctly passed to <code>listenTo</code>. Here's the full fake context:
<code>javascript
var context = {
listenTo: sinon.stub().returns(context),
render: sinon.stub().returns(context),
renderErrors: "RENDERFUNC",
checkErrorField: "CHECKSTUFF"
};
</code></li>
<li><strong>Create parameter data:</strong> The initialize method doesn't take any arguments, so we don't need to decide on any data for that.</li>
<li><strong>Execute the method:</strong> Now we execute the method on our fake context: <code>var result = initialize.call(context);</code></li>
<li><strong>Test the result:</strong> As the initialize method isn't supposed to return anything, we don't need to test the result.</li>
<li><strong>Check context manipulation:</strong> The method was supposed to add a dishmodel instance to <code>.model</code>, so let's make sure that happened:
<code>javascript
it("should set a Dishmodel instance on .model",function(){
expect(context.model instanceof Dishmodel).toBe(true);
});
</code></li>
<li><strong>Check method calls:</strong> Finally we need to make sure that other functions were called as expected. First we check for the expected call to <code>render</code>:
<code>javascript
it("should call render",function(){
   expect(context.render).toHaveBeenCalledOnce();
});
</code>
And finally we test if the two event listeners were set:
``` javascript
it("added the event listeners",function(){
   expect(context.listenTo).toHaveBeenCalledTwice();
   expect(context.listenTo.firstCall.args).toEqual([

<pre><code>   context.model,"invalid",context.renderErrors
</code></pre>

   ]);
   expect(context.listenTo.secondCall.args).toEqual([

<pre><code>   context.model,"change",context.checkErrorField
</code></pre>

<p>   ]);
});
```</p></li>
</ol>


<p>Here's the test code in full:</p>

<p>``` javascript Unit Tests for initialize function
describe("the initialize function",function(){</p>

<pre><code>var initialize = AddRecipeView.prototype.initialize,
    context = {
        listenTo: sinon.stub().returns(context),
        render: sinon.stub().returns(context),
        renderErrors: "RENDERFUNC",
        checkErrorField: "CHECKSTUFF"
    };
initialize.call(context);
it("should set a Dishmodel instance on .model",function(){
    expect(context.model instanceof Dishmodel).toBe(true);
});
it("should call render",function(){
    expect(context.render).toHaveBeenCalledOnce();
});
it("called listenTo correctly",function(){
    expect(context.listenTo).toHaveBeenCalledTwice();
    expect(context.listenTo.firstCall.args).toEqual([
        context.model,"invalid",context.renderErrors
    ]);
    expect(context.listenTo.secondCall.args).toEqual([
        context.model,"change",context.checkErrorField
    ]);
});
</code></pre>

<p>});
```</p>

<p>All tests test the expected behaviour of the function, and nothing else. We're not even depending on any Backbone functionality, which is one of the badges to strive for when unit testing your Backbone apps! Achieving that will make the test simpler, smaller and less fragile.</p>

<h3>Testing DOM methods</h3>

<p>The same approach can be adopted even when DOM manipulation is involved. Here is the <code>renderErrors</code> function of the same view:</p>

<p>``` javascript Backbone view function
renderErrors: function(model) {</p>

<pre><code>this.$('.errors').html('');
_.each(model.validationError, function(error) {
    this.$('.errors').append(error.message + '&lt;br&gt;');
});
</code></pre>

<p>},
```</p>

<p>How to test that? There's even quirkier chaining going on, and we're manipulating the DOM. Is testing this really feasible without instantiating the view?</p>

<p>Here's what I did:</p>

<p>``` javascript Unit tests
describe("the renderError function",function(){</p>

<pre><code>var renderErr = AddRecipeView.prototype.renderErrors,
    model = {validationError:[
        {message:"err1"},{message:"err2"},{message:"err3"}
    ]},
    $el = {
        html: sinon.spy(),
        append: sinon.spy()
    },
    context = {
        $: sinon.stub().returns($el);
    };
renderErr.call(context,model);
it("should use the correct selector",function(){
    expect(context.$).toHaveBeenAlwaysCalledWith(".errors");
});
it("should have cleared the previous html",function(){
    expect($el.html).toHaveBeenCalledWith("");
});
it("appends each errormsg",function(){
    expect($el.append).toHaveBeenCalledThrice();
    expect($el.append.firstCall.args).toEqual([
        model.validationError[0].message+"&lt;br&gt;"
    ]);
    expect($el.append.secondCall.args).toEqual([
        model.validationError[1].message+"&lt;br&gt;"
    ]);
    expect($el.append.thirdCall.args).toEqual([
        model.validationError[2].message+"&lt;br&gt;"
    ]);
});
</code></pre>

<p>});
```</p>

<p>In order to deal with the chain, I made a dummy object for the element (<code>$el</code>), and then I made the spy for the scoped selector <code>$</code> return that dummy. This deals with the chaining problem, but is perhaps a bit too implementation specific - for example, the student might change from using <code>this.$(selector)</code> to <code>this.$el.find(selector)</code>, in which case my test would fail. It will however keep working even if he starts caching the result from <code>this.$(selector)</code>, which he should of course do.</p>

<p>Apart from the danger of becoming implementation specific, I find that this fake chain approach mostly works very well!</p>

<p>As for the DOM, the secret to testing it is NOT to test it. Here I stub out the relevant methods, and then simply check that they're called correctly. No special measure needs to be taken just because they're functions that are supposed to affect the DOM. I find this approach much easier than actually making sure that the correct html was set. In fact, I'll go as far as to end this post with another bit of troll bait:</p>

<blockquote><p><em>Testing if <code>this.$el.html() === expectedHtml</code> is an <strong>antipattern</strong>!</em></p></blockquote>
]]></content>
  </entry>
  
</feed>
