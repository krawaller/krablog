<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Krawaller webdev blog]]></title>
  <link href="http://krawaller.github.com/krablog/atom.xml" rel="self"/>
  <link href="http://krawaller.github.com/krablog/"/>
  <updated>2013-02-23T17:29:14+01:00</updated>
  <id>http://krawaller.github.com/krablog/</id>
  <author>
    <name><![CDATA[Krawaller]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Backbone Objects]]></title>
    <link href="http://krawaller.github.com/krablog/blog/2013/02/23/testing-backbone-objects/"/>
    <updated>2013-02-23T17:21:00+01:00</updated>
    <id>http://krawaller.github.com/krablog/blog/2013/02/23/testing-backbone-objects</id>
    <content type="html"><![CDATA[<h3>Troll bait (or &#8220;How not to do it&#8221;)</h3>

<p>Here&#8217;s a blanket statement to flame against:</p>

<blockquote><p><em>Instantiating Backbone views/controllers/models in order to test them is an <strong>antipattern</strong>!</em></p></blockquote>

<p>Why? When we try to test an instance, we&#8217;re faced with two main problems:</p>

<ul>
<li> It will likely <strong>require lots of setup</strong>, as we have to call the constructor with some reasonable data.</li>
<li> When testing some aspect of the instance, it is <strong>hard to make the test independent</strong> of other functionality aspects.</li>
</ul>


<h3>How to do it</h3>

<p>So, then, how should it be done? Here&#8217;s the approach I use.</p>

<ol>
<li>First I <strong>access the method</strong> to test through <code>var method = MyConstructor.prototype.methodToTest</code>.</li>
<li>If the method touches <code>this</code> (which is almost always the case) I <strong>create a custom context</strong> object containing stubs, spies and dummy data as needed.</li>
<li>I create eventual <strong>parameter</strong> data.</li>
<li>I&#8217;ll then <strong>call the method on the custom context</strong>: <code>var result = method.call(context, ...args...);</code>.</li>
<li>Following that I can <strong>test the result</strong>&#8230;</li>
<li>&#8230;and also if my <strong>spies where called in the correct way</strong>.</li>
</ol>


<h3>A small case study</h3>

<p>As an example, consider the (adapted) following view that a student of mine had in a recent project:</p>

<figure class='code'><figcaption><span>Backbone View</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">AddRecipeView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">opts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DishModel</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">()</span>
</span><span class='line'>      <span class="c1">// Listen to model validation errors</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span> <span class="s1">&#39;invalid&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">renderErrors</span><span class="p">)</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">listenTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span> <span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">checkErrorField</span><span class="p">)</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...rest of functionality edited out...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the test philosofy outlined above, how would we test the <code>initialize</code> function? Here&#8217;s one suggestion, using <a href="[http://pivotal.github.com/jasmine/]">Jasmine</a>, <a href="[http://sinonjs.org/]">Sinon</a> and <a href="[https://github.com/froots/jasmine-sinon]">Jasmine-sinon</a> custom matchers:</p>

<figure class='code'><figcaption><span>Unit Tests for initialize function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;the initialize function&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">initialize</span> <span class="o">=</span> <span class="nx">AddRecipeView</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">listenTo</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">().</span><span class="nx">returns</span><span class="p">(</span><span class="nx">context</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">render</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">().</span><span class="nx">returns</span><span class="p">(</span><span class="nx">context</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">renderErrors</span><span class="o">:</span> <span class="s2">&quot;RENDERFUNC&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">checkErrorField</span><span class="o">:</span> <span class="s2">&quot;CHECKSTUFF&quot;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">context</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should set a Dishmodel instance on .model&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">model</span> <span class="k">instanceof</span> <span class="nx">Dishmodel</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should call render&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">render</span><span class="p">).</span><span class="nx">toHaveBeenCalledOnce</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;called listenTo correctly&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">).</span><span class="nx">toHaveBeenCalledTwice</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">.</span><span class="nx">firstCall</span><span class="p">.</span><span class="nx">args</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span>
</span><span class='line'>          <span class="nx">context</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span><span class="s2">&quot;invalid&quot;</span><span class="p">,</span><span class="nx">context</span><span class="p">.</span><span class="nx">renderErrors</span>
</span><span class='line'>        <span class="p">]);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">listenTo</span><span class="p">.</span><span class="nx">secondCall</span><span class="p">.</span><span class="nx">args</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span>
</span><span class='line'>          <span class="nx">context</span><span class="p">.</span><span class="nx">model</span><span class="p">,</span><span class="s2">&quot;change&quot;</span><span class="p">,</span><span class="nx">context</span><span class="p">.</span><span class="nx">checkErrorField</span>
</span><span class='line'>        <span class="p">]);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As often the case with testing Backbone objects, we&#8217;re faced with the problem of having to deal with chaining syntax. Here I simply let my stubs for <code>listenTo</code> and <code>render</code> return the <code>context</code>.</p>

<p>Having set that up, we can proceed to check that initialize did what it was supposed to do:</p>

<ol>
<li>It added a Dishmodel instance to <code>context.model</code></li>
<li>It called the render function</li>
<li>It called listenTo twice. Here we also need to test the arguments. Note how we can make sure that the correct callbacks were passed simply by having dummy data in <code>context.renderErrors</code> and <code>context.checkErrorField</code>.</li>
</ol>


<p>All tests test the expected behaviour of the function, and nothing else. We&#8217;re not even depending on any Backbone functionality, which is one of the badges to strive for when unit testing your Backbone apps! Achieving that will make the test simpler, smaller and less fragile.</p>

<h3>Testing DOM methods</h3>

<p>The same approach can be adopted even when DOM manipulation is involved. Here is the <code>renderErrors</code> function of the same view:</p>

<figure class='code'><figcaption><span>Backbone view function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">renderErrors</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.errors&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">_</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">validationError</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.errors&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="o">+</span> <span class="s1">&#39;&lt;br&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>How to test that? There&#8217;s even quirkier chaining going on, and we&#8217;re manipulating the DOM. Is testing this really feasible without instantiating the view?</p>

<p>Here&#8217;s what I did:</p>

<figure class='code'><figcaption><span>Unit tests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;the renderError function&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">renderErr</span> <span class="o">=</span> <span class="nx">AddRecipeView</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">renderErrors</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">model</span> <span class="o">=</span> <span class="p">{</span><span class="nx">validationError</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>          <span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;err1&quot;</span><span class="p">},{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;err2&quot;</span><span class="p">},{</span><span class="nx">message</span><span class="o">:</span><span class="s2">&quot;err3&quot;</span><span class="p">}</span>
</span><span class='line'>        <span class="p">]},</span>
</span><span class='line'>        <span class="nx">$el</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">html</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">(),</span>
</span><span class='line'>            <span class="nx">append</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">spy</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">context</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="o">:</span> <span class="nx">sinon</span><span class="p">.</span><span class="nx">stub</span><span class="p">().</span><span class="nx">returns</span><span class="p">(</span><span class="nx">$el</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="nx">renderErr</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span><span class="nx">model</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should use the correct selector&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">$</span><span class="p">).</span><span class="nx">toHaveBeenAlwaysCalledWith</span><span class="p">(</span><span class="s2">&quot;.errors&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;should have cleared the previous html&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;appends each errormsg&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">).</span><span class="nx">toHaveBeenCalledThrice</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">.</span><span class="nx">firstCall</span><span class="p">.</span><span class="nx">args</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span>
</span><span class='line'>          <span class="nx">model</span><span class="p">.</span><span class="nx">validationError</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message</span><span class="o">+</span><span class="s2">&quot;&lt;br&gt;&quot;</span>
</span><span class='line'>        <span class="p">]);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">.</span><span class="nx">secondCall</span><span class="p">.</span><span class="nx">args</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span>
</span><span class='line'>          <span class="nx">model</span><span class="p">.</span><span class="nx">validationError</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">message</span><span class="o">+</span><span class="s2">&quot;&lt;br&gt;&quot;</span>
</span><span class='line'>        <span class="p">]);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">.</span><span class="nx">thirdCall</span><span class="p">.</span><span class="nx">args</span><span class="p">).</span><span class="nx">toEqual</span><span class="p">([</span>
</span><span class='line'>          <span class="nx">model</span><span class="p">.</span><span class="nx">validationError</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">message</span><span class="o">+</span><span class="s2">&quot;&lt;br&gt;&quot;</span>
</span><span class='line'>        <span class="p">]);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to deal with the chain, I made a dummy object for the element (<code>$el</code>), and then I made the spy for the scoped selector <code>$</code> return that dummy. This deals with the chaining problem, but is perhaps a bit too implementation specific - for example, the student might change from using <code>this.$(selector)</code> to <code>this.$el.find(selector)</code>, in which case my test would fail. It will however keep working even if he starts caching the result from <code>this.$(selector)</code>, which he should of course do.</p>

<p>Apart from the danger of becoming implementation specific, I find that this fake chain approach mostly works very well!</p>

<p>As for the DOM, the secret to testing it is NOT to test it. Here I stub out the relevant methods, and then simply check that they&#8217;re called correctly. No special measure needs to be taken just because they&#8217;re functions that are supposed to affect the DOM. I find this approach much easier than actually making sure that the correct html was set. In fact, I&#8217;ll go as far as to end this post with another bit of troll bait:</p>

<blockquote><p><em>Testing if <code>this.$el.html() === expectedHtml</code> is an <strong>antipattern</strong>!</em></p></blockquote>
]]></content>
  </entry>
  
</feed>
